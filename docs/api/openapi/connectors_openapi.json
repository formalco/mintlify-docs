{
  "openapi": "3.1.0",
  "info": {
    "title": "core.v1.ConnectorService"
  },
  "paths": {
    "/core.v1.ConnectorService/CreateConnector": {
      "post": {
        "tags": [
          "core.v1.ConnectorService"
        ],
        "summary": "CreateConnector",
        "operationId": "core.v1.ConnectorService.CreateConnector",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/core.v1.CreateConnectorRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/core.v1.CreateConnectorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid request parameters or body",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "invalid_request"
                    },
                    "message": {
                      "type": "string",
                      "example": "Invalid request parameters"
                    },
                    "details": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "unauthorized"
                    },
                    "message": {
                      "type": "string",
                      "example": "Authentication required"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "forbidden"
                    },
                    "message": {
                      "type": "string",
                      "example": "Insufficient permissions to perform this action"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "not_found"
                    },
                    "message": {
                      "type": "string",
                      "example": "Resource not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - An error occurred processing the request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "internal_error"
                    },
                    "message": {
                      "type": "string",
                      "example": "An internal error occurred"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "curl",
            "label": "cURL",
            "source": "curl -X POST \"https://api.joinformal.com/core.v1.ConnectorService/CreateConnector\" \\\n  -H \"Authorization: Bearer YOUR_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"example\": \"value\"\n  }'"
          },
          {
            "lang": "javascript",
            "label": "JavaScript (fetch)",
            "source": "fetch(\"https://api.joinformal.com/core.v1.ConnectorService/CreateConnector\", {\n  method: \"POST\",\n  headers: {\n    \"Authorization\": \"Bearer YOUR_API_KEY\",\n    \"Content-Type\": \"application/json\"\n  },\n  body: JSON.stringify({\n    example: \"value\"\n  })\n})\n  .then(response => response.json())\n  .then(data => console.log(data))\n  .catch(error => console.error(error));"
          },
          {
            "lang": "python",
            "label": "Python",
            "source": "import requests\n\nurl = \"https://api.joinformal.com/core.v1.ConnectorService/CreateConnector\"\nheaders = {\n    \"Authorization\": \"Bearer YOUR_API_KEY\",\n    \"Content-Type\": \"application/json\"\n}\ndata = {\n    \"example\": \"value\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())"
          },
          {
            "lang": "go",
            "label": "Go",
            "source": "package main\n\nimport (\n    \"bytes\"\n    \"encoding/json\"\n    \"fmt\"\n    \"io\"\n    \"net/http\"\n)\n\nfunc main() {\n    url := \"https://api.joinformal.com/core.v1.ConnectorService/CreateConnector\"\n\n    body := map[string]string{\n        \"example\": \"value\",\n    }\n\n    jsonData, _ := json.Marshal(body)\n\n    req, _ := http.NewRequest(\"POST\", url, bytes.NewBuffer(jsonData))\n    req.Header.Set(\"Authorization\", \"Bearer YOUR_API_KEY\")\n    req.Header.Set(\"Content-Type\", \"application/json\")\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        panic(err)\n    }\n    defer resp.Body.Close()\n\n    responseBody, _ := io.ReadAll(resp.Body)\n    fmt.Println(string(responseBody))\n}"
          }
        ]
      }
    },
    "/core.v1.ConnectorService/CreateConnectorCloudformationTemplate": {
      "post": {
        "tags": [
          "core.v1.ConnectorService"
        ],
        "summary": "CreateConnectorCloudformationTemplate",
        "operationId": "core.v1.ConnectorService.CreateConnectorCloudformationTemplate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/core.v1.CreateConnectorCloudformationTemplateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/core.v1.CreateConnectorCloudformationTemplateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid request parameters or body",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "invalid_request"
                    },
                    "message": {
                      "type": "string",
                      "example": "Invalid request parameters"
                    },
                    "details": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "unauthorized"
                    },
                    "message": {
                      "type": "string",
                      "example": "Authentication required"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "forbidden"
                    },
                    "message": {
                      "type": "string",
                      "example": "Insufficient permissions to perform this action"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "not_found"
                    },
                    "message": {
                      "type": "string",
                      "example": "Resource not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - An error occurred processing the request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "internal_error"
                    },
                    "message": {
                      "type": "string",
                      "example": "An internal error occurred"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "curl",
            "label": "cURL",
            "source": "curl -X POST \"https://api.joinformal.com/core.v1.ConnectorService/CreateConnectorCloudformationTemplate\" \\\n  -H \"Authorization: Bearer YOUR_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"example\": \"value\"\n  }'"
          },
          {
            "lang": "javascript",
            "label": "JavaScript (fetch)",
            "source": "fetch(\"https://api.joinformal.com/core.v1.ConnectorService/CreateConnectorCloudformationTemplate\", {\n  method: \"POST\",\n  headers: {\n    \"Authorization\": \"Bearer YOUR_API_KEY\",\n    \"Content-Type\": \"application/json\"\n  },\n  body: JSON.stringify({\n    example: \"value\"\n  })\n})\n  .then(response => response.json())\n  .then(data => console.log(data))\n  .catch(error => console.error(error));"
          },
          {
            "lang": "python",
            "label": "Python",
            "source": "import requests\n\nurl = \"https://api.joinformal.com/core.v1.ConnectorService/CreateConnectorCloudformationTemplate\"\nheaders = {\n    \"Authorization\": \"Bearer YOUR_API_KEY\",\n    \"Content-Type\": \"application/json\"\n}\ndata = {\n    \"example\": \"value\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())"
          },
          {
            "lang": "go",
            "label": "Go",
            "source": "package main\n\nimport (\n    \"bytes\"\n    \"encoding/json\"\n    \"fmt\"\n    \"io\"\n    \"net/http\"\n)\n\nfunc main() {\n    url := \"https://api.joinformal.com/core.v1.ConnectorService/CreateConnectorCloudformationTemplate\"\n\n    body := map[string]string{\n        \"example\": \"value\",\n    }\n\n    jsonData, _ := json.Marshal(body)\n\n    req, _ := http.NewRequest(\"POST\", url, bytes.NewBuffer(jsonData))\n    req.Header.Set(\"Authorization\", \"Bearer YOUR_API_KEY\")\n    req.Header.Set(\"Content-Type\", \"application/json\")\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        panic(err)\n    }\n    defer resp.Body.Close()\n\n    responseBody, _ := io.ReadAll(resp.Body)\n    fmt.Println(string(responseBody))\n}"
          }
        ]
      }
    },
    "/core.v1.ConnectorService/CreateConnectorConfiguration": {
      "post": {
        "tags": [
          "core.v1.ConnectorService"
        ],
        "summary": "CreateConnectorConfiguration",
        "operationId": "core.v1.ConnectorService.CreateConnectorConfiguration",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/core.v1.CreateConnectorConfigurationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/core.v1.CreateConnectorConfigurationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid request parameters or body",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "invalid_request"
                    },
                    "message": {
                      "type": "string",
                      "example": "Invalid request parameters"
                    },
                    "details": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "unauthorized"
                    },
                    "message": {
                      "type": "string",
                      "example": "Authentication required"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "forbidden"
                    },
                    "message": {
                      "type": "string",
                      "example": "Insufficient permissions to perform this action"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "not_found"
                    },
                    "message": {
                      "type": "string",
                      "example": "Resource not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - An error occurred processing the request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "internal_error"
                    },
                    "message": {
                      "type": "string",
                      "example": "An internal error occurred"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "curl",
            "label": "cURL",
            "source": "curl -X POST \"https://api.joinformal.com/core.v1.ConnectorService/CreateConnectorConfiguration\" \\\n  -H \"Authorization: Bearer YOUR_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"example\": \"value\"\n  }'"
          },
          {
            "lang": "javascript",
            "label": "JavaScript (fetch)",
            "source": "fetch(\"https://api.joinformal.com/core.v1.ConnectorService/CreateConnectorConfiguration\", {\n  method: \"POST\",\n  headers: {\n    \"Authorization\": \"Bearer YOUR_API_KEY\",\n    \"Content-Type\": \"application/json\"\n  },\n  body: JSON.stringify({\n    example: \"value\"\n  })\n})\n  .then(response => response.json())\n  .then(data => console.log(data))\n  .catch(error => console.error(error));"
          },
          {
            "lang": "python",
            "label": "Python",
            "source": "import requests\n\nurl = \"https://api.joinformal.com/core.v1.ConnectorService/CreateConnectorConfiguration\"\nheaders = {\n    \"Authorization\": \"Bearer YOUR_API_KEY\",\n    \"Content-Type\": \"application/json\"\n}\ndata = {\n    \"example\": \"value\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())"
          },
          {
            "lang": "go",
            "label": "Go",
            "source": "package main\n\nimport (\n    \"bytes\"\n    \"encoding/json\"\n    \"fmt\"\n    \"io\"\n    \"net/http\"\n)\n\nfunc main() {\n    url := \"https://api.joinformal.com/core.v1.ConnectorService/CreateConnectorConfiguration\"\n\n    body := map[string]string{\n        \"example\": \"value\",\n    }\n\n    jsonData, _ := json.Marshal(body)\n\n    req, _ := http.NewRequest(\"POST\", url, bytes.NewBuffer(jsonData))\n    req.Header.Set(\"Authorization\", \"Bearer YOUR_API_KEY\")\n    req.Header.Set(\"Content-Type\", \"application/json\")\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        panic(err)\n    }\n    defer resp.Body.Close()\n\n    responseBody, _ := io.ReadAll(resp.Body)\n    fmt.Println(string(responseBody))\n}"
          }
        ]
      }
    },
    "/core.v1.ConnectorService/CreateConnectorHelmValues": {
      "post": {
        "tags": [
          "core.v1.ConnectorService"
        ],
        "summary": "CreateConnectorHelmValues",
        "operationId": "core.v1.ConnectorService.CreateConnectorHelmValues",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/core.v1.CreateConnectorHelmValuesRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/core.v1.CreateConnectorHelmValuesResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid request parameters or body",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "invalid_request"
                    },
                    "message": {
                      "type": "string",
                      "example": "Invalid request parameters"
                    },
                    "details": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "unauthorized"
                    },
                    "message": {
                      "type": "string",
                      "example": "Authentication required"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "forbidden"
                    },
                    "message": {
                      "type": "string",
                      "example": "Insufficient permissions to perform this action"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "not_found"
                    },
                    "message": {
                      "type": "string",
                      "example": "Resource not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - An error occurred processing the request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "internal_error"
                    },
                    "message": {
                      "type": "string",
                      "example": "An internal error occurred"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "curl",
            "label": "cURL",
            "source": "curl -X POST \"https://api.joinformal.com/core.v1.ConnectorService/CreateConnectorHelmValues\" \\\n  -H \"Authorization: Bearer YOUR_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"example\": \"value\"\n  }'"
          },
          {
            "lang": "javascript",
            "label": "JavaScript (fetch)",
            "source": "fetch(\"https://api.joinformal.com/core.v1.ConnectorService/CreateConnectorHelmValues\", {\n  method: \"POST\",\n  headers: {\n    \"Authorization\": \"Bearer YOUR_API_KEY\",\n    \"Content-Type\": \"application/json\"\n  },\n  body: JSON.stringify({\n    example: \"value\"\n  })\n})\n  .then(response => response.json())\n  .then(data => console.log(data))\n  .catch(error => console.error(error));"
          },
          {
            "lang": "python",
            "label": "Python",
            "source": "import requests\n\nurl = \"https://api.joinformal.com/core.v1.ConnectorService/CreateConnectorHelmValues\"\nheaders = {\n    \"Authorization\": \"Bearer YOUR_API_KEY\",\n    \"Content-Type\": \"application/json\"\n}\ndata = {\n    \"example\": \"value\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())"
          },
          {
            "lang": "go",
            "label": "Go",
            "source": "package main\n\nimport (\n    \"bytes\"\n    \"encoding/json\"\n    \"fmt\"\n    \"io\"\n    \"net/http\"\n)\n\nfunc main() {\n    url := \"https://api.joinformal.com/core.v1.ConnectorService/CreateConnectorHelmValues\"\n\n    body := map[string]string{\n        \"example\": \"value\",\n    }\n\n    jsonData, _ := json.Marshal(body)\n\n    req, _ := http.NewRequest(\"POST\", url, bytes.NewBuffer(jsonData))\n    req.Header.Set(\"Authorization\", \"Bearer YOUR_API_KEY\")\n    req.Header.Set(\"Content-Type\", \"application/json\")\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        panic(err)\n    }\n    defer resp.Body.Close()\n\n    responseBody, _ := io.ReadAll(resp.Body)\n    fmt.Println(string(responseBody))\n}"
          }
        ]
      }
    },
    "/core.v1.ConnectorService/CreateConnectorHostname": {
      "post": {
        "tags": [
          "core.v1.ConnectorService"
        ],
        "summary": "CreateConnectorHostname",
        "operationId": "core.v1.ConnectorService.CreateConnectorHostname",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/core.v1.CreateConnectorHostnameRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/core.v1.CreateConnectorHostnameResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid request parameters or body",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "invalid_request"
                    },
                    "message": {
                      "type": "string",
                      "example": "Invalid request parameters"
                    },
                    "details": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "unauthorized"
                    },
                    "message": {
                      "type": "string",
                      "example": "Authentication required"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "forbidden"
                    },
                    "message": {
                      "type": "string",
                      "example": "Insufficient permissions to perform this action"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "not_found"
                    },
                    "message": {
                      "type": "string",
                      "example": "Resource not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - An error occurred processing the request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "internal_error"
                    },
                    "message": {
                      "type": "string",
                      "example": "An internal error occurred"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "curl",
            "label": "cURL",
            "source": "curl -X POST \"https://api.joinformal.com/core.v1.ConnectorService/CreateConnectorHostname\" \\\n  -H \"Authorization: Bearer YOUR_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"example\": \"value\"\n  }'"
          },
          {
            "lang": "javascript",
            "label": "JavaScript (fetch)",
            "source": "fetch(\"https://api.joinformal.com/core.v1.ConnectorService/CreateConnectorHostname\", {\n  method: \"POST\",\n  headers: {\n    \"Authorization\": \"Bearer YOUR_API_KEY\",\n    \"Content-Type\": \"application/json\"\n  },\n  body: JSON.stringify({\n    example: \"value\"\n  })\n})\n  .then(response => response.json())\n  .then(data => console.log(data))\n  .catch(error => console.error(error));"
          },
          {
            "lang": "python",
            "label": "Python",
            "source": "import requests\n\nurl = \"https://api.joinformal.com/core.v1.ConnectorService/CreateConnectorHostname\"\nheaders = {\n    \"Authorization\": \"Bearer YOUR_API_KEY\",\n    \"Content-Type\": \"application/json\"\n}\ndata = {\n    \"example\": \"value\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())"
          },
          {
            "lang": "go",
            "label": "Go",
            "source": "package main\n\nimport (\n    \"bytes\"\n    \"encoding/json\"\n    \"fmt\"\n    \"io\"\n    \"net/http\"\n)\n\nfunc main() {\n    url := \"https://api.joinformal.com/core.v1.ConnectorService/CreateConnectorHostname\"\n\n    body := map[string]string{\n        \"example\": \"value\",\n    }\n\n    jsonData, _ := json.Marshal(body)\n\n    req, _ := http.NewRequest(\"POST\", url, bytes.NewBuffer(jsonData))\n    req.Header.Set(\"Authorization\", \"Bearer YOUR_API_KEY\")\n    req.Header.Set(\"Content-Type\", \"application/json\")\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        panic(err)\n    }\n    defer resp.Body.Close()\n\n    responseBody, _ := io.ReadAll(resp.Body)\n    fmt.Println(string(responseBody))\n}"
          }
        ]
      }
    },
    "/core.v1.ConnectorService/CreateConnectorInstanceShutdownRequest": {
      "post": {
        "tags": [
          "core.v1.ConnectorService"
        ],
        "summary": "CreateConnectorInstanceShutdownRequest",
        "operationId": "core.v1.ConnectorService.CreateConnectorInstanceShutdownRequest",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/core.v1.CreateConnectorInstanceShutdownRequestRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/core.v1.CreateConnectorInstanceShutdownRequestResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid request parameters or body",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "invalid_request"
                    },
                    "message": {
                      "type": "string",
                      "example": "Invalid request parameters"
                    },
                    "details": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "unauthorized"
                    },
                    "message": {
                      "type": "string",
                      "example": "Authentication required"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "forbidden"
                    },
                    "message": {
                      "type": "string",
                      "example": "Insufficient permissions to perform this action"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "not_found"
                    },
                    "message": {
                      "type": "string",
                      "example": "Resource not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - An error occurred processing the request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "internal_error"
                    },
                    "message": {
                      "type": "string",
                      "example": "An internal error occurred"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "curl",
            "label": "cURL",
            "source": "curl -X POST \"https://api.joinformal.com/core.v1.ConnectorService/CreateConnectorInstanceShutdownRequest\" \\\n  -H \"Authorization: Bearer YOUR_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"example\": \"value\"\n  }'"
          },
          {
            "lang": "javascript",
            "label": "JavaScript (fetch)",
            "source": "fetch(\"https://api.joinformal.com/core.v1.ConnectorService/CreateConnectorInstanceShutdownRequest\", {\n  method: \"POST\",\n  headers: {\n    \"Authorization\": \"Bearer YOUR_API_KEY\",\n    \"Content-Type\": \"application/json\"\n  },\n  body: JSON.stringify({\n    example: \"value\"\n  })\n})\n  .then(response => response.json())\n  .then(data => console.log(data))\n  .catch(error => console.error(error));"
          },
          {
            "lang": "python",
            "label": "Python",
            "source": "import requests\n\nurl = \"https://api.joinformal.com/core.v1.ConnectorService/CreateConnectorInstanceShutdownRequest\"\nheaders = {\n    \"Authorization\": \"Bearer YOUR_API_KEY\",\n    \"Content-Type\": \"application/json\"\n}\ndata = {\n    \"example\": \"value\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())"
          },
          {
            "lang": "go",
            "label": "Go",
            "source": "package main\n\nimport (\n    \"bytes\"\n    \"encoding/json\"\n    \"fmt\"\n    \"io\"\n    \"net/http\"\n)\n\nfunc main() {\n    url := \"https://api.joinformal.com/core.v1.ConnectorService/CreateConnectorInstanceShutdownRequest\"\n\n    body := map[string]string{\n        \"example\": \"value\",\n    }\n\n    jsonData, _ := json.Marshal(body)\n\n    req, _ := http.NewRequest(\"POST\", url, bytes.NewBuffer(jsonData))\n    req.Header.Set(\"Authorization\", \"Bearer YOUR_API_KEY\")\n    req.Header.Set(\"Content-Type\", \"application/json\")\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        panic(err)\n    }\n    defer resp.Body.Close()\n\n    responseBody, _ := io.ReadAll(resp.Body)\n    fmt.Println(string(responseBody))\n}"
          }
        ]
      }
    },
    "/core.v1.ConnectorService/CreateConnectorListener": {
      "post": {
        "tags": [
          "core.v1.ConnectorService"
        ],
        "summary": "CreateConnectorListener",
        "operationId": "core.v1.ConnectorService.CreateConnectorListener",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/core.v1.CreateConnectorListenerRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/core.v1.CreateConnectorListenerResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid request parameters or body",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "invalid_request"
                    },
                    "message": {
                      "type": "string",
                      "example": "Invalid request parameters"
                    },
                    "details": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "unauthorized"
                    },
                    "message": {
                      "type": "string",
                      "example": "Authentication required"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "forbidden"
                    },
                    "message": {
                      "type": "string",
                      "example": "Insufficient permissions to perform this action"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "not_found"
                    },
                    "message": {
                      "type": "string",
                      "example": "Resource not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - An error occurred processing the request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "internal_error"
                    },
                    "message": {
                      "type": "string",
                      "example": "An internal error occurred"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "curl",
            "label": "cURL",
            "source": "curl -X POST \"https://api.joinformal.com/core.v1.ConnectorService/CreateConnectorListener\" \\\n  -H \"Authorization: Bearer YOUR_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"example\": \"value\"\n  }'"
          },
          {
            "lang": "javascript",
            "label": "JavaScript (fetch)",
            "source": "fetch(\"https://api.joinformal.com/core.v1.ConnectorService/CreateConnectorListener\", {\n  method: \"POST\",\n  headers: {\n    \"Authorization\": \"Bearer YOUR_API_KEY\",\n    \"Content-Type\": \"application/json\"\n  },\n  body: JSON.stringify({\n    example: \"value\"\n  })\n})\n  .then(response => response.json())\n  .then(data => console.log(data))\n  .catch(error => console.error(error));"
          },
          {
            "lang": "python",
            "label": "Python",
            "source": "import requests\n\nurl = \"https://api.joinformal.com/core.v1.ConnectorService/CreateConnectorListener\"\nheaders = {\n    \"Authorization\": \"Bearer YOUR_API_KEY\",\n    \"Content-Type\": \"application/json\"\n}\ndata = {\n    \"example\": \"value\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())"
          },
          {
            "lang": "go",
            "label": "Go",
            "source": "package main\n\nimport (\n    \"bytes\"\n    \"encoding/json\"\n    \"fmt\"\n    \"io\"\n    \"net/http\"\n)\n\nfunc main() {\n    url := \"https://api.joinformal.com/core.v1.ConnectorService/CreateConnectorListener\"\n\n    body := map[string]string{\n        \"example\": \"value\",\n    }\n\n    jsonData, _ := json.Marshal(body)\n\n    req, _ := http.NewRequest(\"POST\", url, bytes.NewBuffer(jsonData))\n    req.Header.Set(\"Authorization\", \"Bearer YOUR_API_KEY\")\n    req.Header.Set(\"Content-Type\", \"application/json\")\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        panic(err)\n    }\n    defer resp.Body.Close()\n\n    responseBody, _ := io.ReadAll(resp.Body)\n    fmt.Println(string(responseBody))\n}"
          }
        ]
      }
    },
    "/core.v1.ConnectorService/CreateConnectorListenerLink": {
      "post": {
        "tags": [
          "core.v1.ConnectorService"
        ],
        "summary": "CreateConnectorListenerLink",
        "operationId": "core.v1.ConnectorService.CreateConnectorListenerLink",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/core.v1.CreateConnectorListenerLinkRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/core.v1.CreateConnectorListenerLinkResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid request parameters or body",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "invalid_request"
                    },
                    "message": {
                      "type": "string",
                      "example": "Invalid request parameters"
                    },
                    "details": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "unauthorized"
                    },
                    "message": {
                      "type": "string",
                      "example": "Authentication required"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "forbidden"
                    },
                    "message": {
                      "type": "string",
                      "example": "Insufficient permissions to perform this action"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "not_found"
                    },
                    "message": {
                      "type": "string",
                      "example": "Resource not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - An error occurred processing the request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "internal_error"
                    },
                    "message": {
                      "type": "string",
                      "example": "An internal error occurred"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "curl",
            "label": "cURL",
            "source": "curl -X POST \"https://api.joinformal.com/core.v1.ConnectorService/CreateConnectorListenerLink\" \\\n  -H \"Authorization: Bearer YOUR_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"example\": \"value\"\n  }'"
          },
          {
            "lang": "javascript",
            "label": "JavaScript (fetch)",
            "source": "fetch(\"https://api.joinformal.com/core.v1.ConnectorService/CreateConnectorListenerLink\", {\n  method: \"POST\",\n  headers: {\n    \"Authorization\": \"Bearer YOUR_API_KEY\",\n    \"Content-Type\": \"application/json\"\n  },\n  body: JSON.stringify({\n    example: \"value\"\n  })\n})\n  .then(response => response.json())\n  .then(data => console.log(data))\n  .catch(error => console.error(error));"
          },
          {
            "lang": "python",
            "label": "Python",
            "source": "import requests\n\nurl = \"https://api.joinformal.com/core.v1.ConnectorService/CreateConnectorListenerLink\"\nheaders = {\n    \"Authorization\": \"Bearer YOUR_API_KEY\",\n    \"Content-Type\": \"application/json\"\n}\ndata = {\n    \"example\": \"value\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())"
          },
          {
            "lang": "go",
            "label": "Go",
            "source": "package main\n\nimport (\n    \"bytes\"\n    \"encoding/json\"\n    \"fmt\"\n    \"io\"\n    \"net/http\"\n)\n\nfunc main() {\n    url := \"https://api.joinformal.com/core.v1.ConnectorService/CreateConnectorListenerLink\"\n\n    body := map[string]string{\n        \"example\": \"value\",\n    }\n\n    jsonData, _ := json.Marshal(body)\n\n    req, _ := http.NewRequest(\"POST\", url, bytes.NewBuffer(jsonData))\n    req.Header.Set(\"Authorization\", \"Bearer YOUR_API_KEY\")\n    req.Header.Set(\"Content-Type\", \"application/json\")\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        panic(err)\n    }\n    defer resp.Body.Close()\n\n    responseBody, _ := io.ReadAll(resp.Body)\n    fmt.Println(string(responseBody))\n}"
          }
        ]
      }
    },
    "/core.v1.ConnectorService/CreateConnectorListenerRule": {
      "post": {
        "tags": [
          "core.v1.ConnectorService"
        ],
        "summary": "CreateConnectorListenerRule",
        "operationId": "core.v1.ConnectorService.CreateConnectorListenerRule",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/core.v1.CreateConnectorListenerRuleRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/core.v1.CreateConnectorListenerRuleResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid request parameters or body",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "invalid_request"
                    },
                    "message": {
                      "type": "string",
                      "example": "Invalid request parameters"
                    },
                    "details": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "unauthorized"
                    },
                    "message": {
                      "type": "string",
                      "example": "Authentication required"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "forbidden"
                    },
                    "message": {
                      "type": "string",
                      "example": "Insufficient permissions to perform this action"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "not_found"
                    },
                    "message": {
                      "type": "string",
                      "example": "Resource not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - An error occurred processing the request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "internal_error"
                    },
                    "message": {
                      "type": "string",
                      "example": "An internal error occurred"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "curl",
            "label": "cURL",
            "source": "curl -X POST \"https://api.joinformal.com/core.v1.ConnectorService/CreateConnectorListenerRule\" \\\n  -H \"Authorization: Bearer YOUR_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"example\": \"value\"\n  }'"
          },
          {
            "lang": "javascript",
            "label": "JavaScript (fetch)",
            "source": "fetch(\"https://api.joinformal.com/core.v1.ConnectorService/CreateConnectorListenerRule\", {\n  method: \"POST\",\n  headers: {\n    \"Authorization\": \"Bearer YOUR_API_KEY\",\n    \"Content-Type\": \"application/json\"\n  },\n  body: JSON.stringify({\n    example: \"value\"\n  })\n})\n  .then(response => response.json())\n  .then(data => console.log(data))\n  .catch(error => console.error(error));"
          },
          {
            "lang": "python",
            "label": "Python",
            "source": "import requests\n\nurl = \"https://api.joinformal.com/core.v1.ConnectorService/CreateConnectorListenerRule\"\nheaders = {\n    \"Authorization\": \"Bearer YOUR_API_KEY\",\n    \"Content-Type\": \"application/json\"\n}\ndata = {\n    \"example\": \"value\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())"
          },
          {
            "lang": "go",
            "label": "Go",
            "source": "package main\n\nimport (\n    \"bytes\"\n    \"encoding/json\"\n    \"fmt\"\n    \"io\"\n    \"net/http\"\n)\n\nfunc main() {\n    url := \"https://api.joinformal.com/core.v1.ConnectorService/CreateConnectorListenerRule\"\n\n    body := map[string]string{\n        \"example\": \"value\",\n    }\n\n    jsonData, _ := json.Marshal(body)\n\n    req, _ := http.NewRequest(\"POST\", url, bytes.NewBuffer(jsonData))\n    req.Header.Set(\"Authorization\", \"Bearer YOUR_API_KEY\")\n    req.Header.Set(\"Content-Type\", \"application/json\")\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        panic(err)\n    }\n    defer resp.Body.Close()\n\n    responseBody, _ := io.ReadAll(resp.Body)\n    fmt.Println(string(responseBody))\n}"
          }
        ]
      }
    },
    "/core.v1.ConnectorService/CreateConnectorSatelliteLink": {
      "post": {
        "tags": [
          "core.v1.ConnectorService"
        ],
        "summary": "CreateConnectorSatelliteLink",
        "description": "Create Connector Satellite Link",
        "operationId": "core.v1.ConnectorService.CreateConnectorSatelliteLink",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/core.v1.CreateConnectorSatelliteLinkRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/core.v1.CreateConnectorSatelliteLinkResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid request parameters or body",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "invalid_request"
                    },
                    "message": {
                      "type": "string",
                      "example": "Invalid request parameters"
                    },
                    "details": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "unauthorized"
                    },
                    "message": {
                      "type": "string",
                      "example": "Authentication required"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "forbidden"
                    },
                    "message": {
                      "type": "string",
                      "example": "Insufficient permissions to perform this action"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "not_found"
                    },
                    "message": {
                      "type": "string",
                      "example": "Resource not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - An error occurred processing the request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "internal_error"
                    },
                    "message": {
                      "type": "string",
                      "example": "An internal error occurred"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "curl",
            "label": "cURL",
            "source": "curl -X POST \"https://api.joinformal.com/core.v1.ConnectorService/CreateConnectorSatelliteLink\" \\\n  -H \"Authorization: Bearer YOUR_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"example\": \"value\"\n  }'"
          },
          {
            "lang": "javascript",
            "label": "JavaScript (fetch)",
            "source": "fetch(\"https://api.joinformal.com/core.v1.ConnectorService/CreateConnectorSatelliteLink\", {\n  method: \"POST\",\n  headers: {\n    \"Authorization\": \"Bearer YOUR_API_KEY\",\n    \"Content-Type\": \"application/json\"\n  },\n  body: JSON.stringify({\n    example: \"value\"\n  })\n})\n  .then(response => response.json())\n  .then(data => console.log(data))\n  .catch(error => console.error(error));"
          },
          {
            "lang": "python",
            "label": "Python",
            "source": "import requests\n\nurl = \"https://api.joinformal.com/core.v1.ConnectorService/CreateConnectorSatelliteLink\"\nheaders = {\n    \"Authorization\": \"Bearer YOUR_API_KEY\",\n    \"Content-Type\": \"application/json\"\n}\ndata = {\n    \"example\": \"value\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())"
          },
          {
            "lang": "go",
            "label": "Go",
            "source": "package main\n\nimport (\n    \"bytes\"\n    \"encoding/json\"\n    \"fmt\"\n    \"io\"\n    \"net/http\"\n)\n\nfunc main() {\n    url := \"https://api.joinformal.com/core.v1.ConnectorService/CreateConnectorSatelliteLink\"\n\n    body := map[string]string{\n        \"example\": \"value\",\n    }\n\n    jsonData, _ := json.Marshal(body)\n\n    req, _ := http.NewRequest(\"POST\", url, bytes.NewBuffer(jsonData))\n    req.Header.Set(\"Authorization\", \"Bearer YOUR_API_KEY\")\n    req.Header.Set(\"Content-Type\", \"application/json\")\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        panic(err)\n    }\n    defer resp.Body.Close()\n\n    responseBody, _ := io.ReadAll(resp.Body)\n    fmt.Println(string(responseBody))\n}"
          }
        ]
      }
    },
    "/core.v1.ConnectorService/DeleteConnector": {
      "post": {
        "tags": [
          "core.v1.ConnectorService"
        ],
        "summary": "DeleteConnector",
        "operationId": "core.v1.ConnectorService.DeleteConnector",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/core.v1.DeleteConnectorRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/core.v1.DeleteConnectorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid request parameters or body",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "invalid_request"
                    },
                    "message": {
                      "type": "string",
                      "example": "Invalid request parameters"
                    },
                    "details": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "unauthorized"
                    },
                    "message": {
                      "type": "string",
                      "example": "Authentication required"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "forbidden"
                    },
                    "message": {
                      "type": "string",
                      "example": "Insufficient permissions to perform this action"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "not_found"
                    },
                    "message": {
                      "type": "string",
                      "example": "Resource not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - An error occurred processing the request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "internal_error"
                    },
                    "message": {
                      "type": "string",
                      "example": "An internal error occurred"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "curl",
            "label": "cURL",
            "source": "curl -X POST \"https://api.joinformal.com/core.v1.ConnectorService/DeleteConnector\" \\\n  -H \"Authorization: Bearer YOUR_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"example\": \"value\"\n  }'"
          },
          {
            "lang": "javascript",
            "label": "JavaScript (fetch)",
            "source": "fetch(\"https://api.joinformal.com/core.v1.ConnectorService/DeleteConnector\", {\n  method: \"POST\",\n  headers: {\n    \"Authorization\": \"Bearer YOUR_API_KEY\",\n    \"Content-Type\": \"application/json\"\n  },\n  body: JSON.stringify({\n    example: \"value\"\n  })\n})\n  .then(response => response.json())\n  .then(data => console.log(data))\n  .catch(error => console.error(error));"
          },
          {
            "lang": "python",
            "label": "Python",
            "source": "import requests\n\nurl = \"https://api.joinformal.com/core.v1.ConnectorService/DeleteConnector\"\nheaders = {\n    \"Authorization\": \"Bearer YOUR_API_KEY\",\n    \"Content-Type\": \"application/json\"\n}\ndata = {\n    \"example\": \"value\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())"
          },
          {
            "lang": "go",
            "label": "Go",
            "source": "package main\n\nimport (\n    \"bytes\"\n    \"encoding/json\"\n    \"fmt\"\n    \"io\"\n    \"net/http\"\n)\n\nfunc main() {\n    url := \"https://api.joinformal.com/core.v1.ConnectorService/DeleteConnector\"\n\n    body := map[string]string{\n        \"example\": \"value\",\n    }\n\n    jsonData, _ := json.Marshal(body)\n\n    req, _ := http.NewRequest(\"POST\", url, bytes.NewBuffer(jsonData))\n    req.Header.Set(\"Authorization\", \"Bearer YOUR_API_KEY\")\n    req.Header.Set(\"Content-Type\", \"application/json\")\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        panic(err)\n    }\n    defer resp.Body.Close()\n\n    responseBody, _ := io.ReadAll(resp.Body)\n    fmt.Println(string(responseBody))\n}"
          }
        ]
      }
    },
    "/core.v1.ConnectorService/DeleteConnectorConfiguration": {
      "post": {
        "tags": [
          "core.v1.ConnectorService"
        ],
        "summary": "DeleteConnectorConfiguration",
        "operationId": "core.v1.ConnectorService.DeleteConnectorConfiguration",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/core.v1.DeleteConnectorConfigurationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/core.v1.DeleteConnectorConfigurationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid request parameters or body",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "invalid_request"
                    },
                    "message": {
                      "type": "string",
                      "example": "Invalid request parameters"
                    },
                    "details": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "unauthorized"
                    },
                    "message": {
                      "type": "string",
                      "example": "Authentication required"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "forbidden"
                    },
                    "message": {
                      "type": "string",
                      "example": "Insufficient permissions to perform this action"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "not_found"
                    },
                    "message": {
                      "type": "string",
                      "example": "Resource not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - An error occurred processing the request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "internal_error"
                    },
                    "message": {
                      "type": "string",
                      "example": "An internal error occurred"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "curl",
            "label": "cURL",
            "source": "curl -X POST \"https://api.joinformal.com/core.v1.ConnectorService/DeleteConnectorConfiguration\" \\\n  -H \"Authorization: Bearer YOUR_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"example\": \"value\"\n  }'"
          },
          {
            "lang": "javascript",
            "label": "JavaScript (fetch)",
            "source": "fetch(\"https://api.joinformal.com/core.v1.ConnectorService/DeleteConnectorConfiguration\", {\n  method: \"POST\",\n  headers: {\n    \"Authorization\": \"Bearer YOUR_API_KEY\",\n    \"Content-Type\": \"application/json\"\n  },\n  body: JSON.stringify({\n    example: \"value\"\n  })\n})\n  .then(response => response.json())\n  .then(data => console.log(data))\n  .catch(error => console.error(error));"
          },
          {
            "lang": "python",
            "label": "Python",
            "source": "import requests\n\nurl = \"https://api.joinformal.com/core.v1.ConnectorService/DeleteConnectorConfiguration\"\nheaders = {\n    \"Authorization\": \"Bearer YOUR_API_KEY\",\n    \"Content-Type\": \"application/json\"\n}\ndata = {\n    \"example\": \"value\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())"
          },
          {
            "lang": "go",
            "label": "Go",
            "source": "package main\n\nimport (\n    \"bytes\"\n    \"encoding/json\"\n    \"fmt\"\n    \"io\"\n    \"net/http\"\n)\n\nfunc main() {\n    url := \"https://api.joinformal.com/core.v1.ConnectorService/DeleteConnectorConfiguration\"\n\n    body := map[string]string{\n        \"example\": \"value\",\n    }\n\n    jsonData, _ := json.Marshal(body)\n\n    req, _ := http.NewRequest(\"POST\", url, bytes.NewBuffer(jsonData))\n    req.Header.Set(\"Authorization\", \"Bearer YOUR_API_KEY\")\n    req.Header.Set(\"Content-Type\", \"application/json\")\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        panic(err)\n    }\n    defer resp.Body.Close()\n\n    responseBody, _ := io.ReadAll(resp.Body)\n    fmt.Println(string(responseBody))\n}"
          }
        ]
      }
    },
    "/core.v1.ConnectorService/DeleteConnectorHostname": {
      "post": {
        "tags": [
          "core.v1.ConnectorService"
        ],
        "summary": "DeleteConnectorHostname",
        "operationId": "core.v1.ConnectorService.DeleteConnectorHostname",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/core.v1.DeleteConnectorHostnameRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/core.v1.DeleteConnectorHostnameResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid request parameters or body",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "invalid_request"
                    },
                    "message": {
                      "type": "string",
                      "example": "Invalid request parameters"
                    },
                    "details": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "unauthorized"
                    },
                    "message": {
                      "type": "string",
                      "example": "Authentication required"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "forbidden"
                    },
                    "message": {
                      "type": "string",
                      "example": "Insufficient permissions to perform this action"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "not_found"
                    },
                    "message": {
                      "type": "string",
                      "example": "Resource not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - An error occurred processing the request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "internal_error"
                    },
                    "message": {
                      "type": "string",
                      "example": "An internal error occurred"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "curl",
            "label": "cURL",
            "source": "curl -X POST \"https://api.joinformal.com/core.v1.ConnectorService/DeleteConnectorHostname\" \\\n  -H \"Authorization: Bearer YOUR_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"example\": \"value\"\n  }'"
          },
          {
            "lang": "javascript",
            "label": "JavaScript (fetch)",
            "source": "fetch(\"https://api.joinformal.com/core.v1.ConnectorService/DeleteConnectorHostname\", {\n  method: \"POST\",\n  headers: {\n    \"Authorization\": \"Bearer YOUR_API_KEY\",\n    \"Content-Type\": \"application/json\"\n  },\n  body: JSON.stringify({\n    example: \"value\"\n  })\n})\n  .then(response => response.json())\n  .then(data => console.log(data))\n  .catch(error => console.error(error));"
          },
          {
            "lang": "python",
            "label": "Python",
            "source": "import requests\n\nurl = \"https://api.joinformal.com/core.v1.ConnectorService/DeleteConnectorHostname\"\nheaders = {\n    \"Authorization\": \"Bearer YOUR_API_KEY\",\n    \"Content-Type\": \"application/json\"\n}\ndata = {\n    \"example\": \"value\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())"
          },
          {
            "lang": "go",
            "label": "Go",
            "source": "package main\n\nimport (\n    \"bytes\"\n    \"encoding/json\"\n    \"fmt\"\n    \"io\"\n    \"net/http\"\n)\n\nfunc main() {\n    url := \"https://api.joinformal.com/core.v1.ConnectorService/DeleteConnectorHostname\"\n\n    body := map[string]string{\n        \"example\": \"value\",\n    }\n\n    jsonData, _ := json.Marshal(body)\n\n    req, _ := http.NewRequest(\"POST\", url, bytes.NewBuffer(jsonData))\n    req.Header.Set(\"Authorization\", \"Bearer YOUR_API_KEY\")\n    req.Header.Set(\"Content-Type\", \"application/json\")\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        panic(err)\n    }\n    defer resp.Body.Close()\n\n    responseBody, _ := io.ReadAll(resp.Body)\n    fmt.Println(string(responseBody))\n}"
          }
        ]
      }
    },
    "/core.v1.ConnectorService/DeleteConnectorListener": {
      "post": {
        "tags": [
          "core.v1.ConnectorService"
        ],
        "summary": "DeleteConnectorListener",
        "operationId": "core.v1.ConnectorService.DeleteConnectorListener",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/core.v1.DeleteConnectorListenerRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/core.v1.DeleteConnectorListenerResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid request parameters or body",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "invalid_request"
                    },
                    "message": {
                      "type": "string",
                      "example": "Invalid request parameters"
                    },
                    "details": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "unauthorized"
                    },
                    "message": {
                      "type": "string",
                      "example": "Authentication required"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "forbidden"
                    },
                    "message": {
                      "type": "string",
                      "example": "Insufficient permissions to perform this action"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "not_found"
                    },
                    "message": {
                      "type": "string",
                      "example": "Resource not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - An error occurred processing the request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "internal_error"
                    },
                    "message": {
                      "type": "string",
                      "example": "An internal error occurred"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "curl",
            "label": "cURL",
            "source": "curl -X POST \"https://api.joinformal.com/core.v1.ConnectorService/DeleteConnectorListener\" \\\n  -H \"Authorization: Bearer YOUR_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"example\": \"value\"\n  }'"
          },
          {
            "lang": "javascript",
            "label": "JavaScript (fetch)",
            "source": "fetch(\"https://api.joinformal.com/core.v1.ConnectorService/DeleteConnectorListener\", {\n  method: \"POST\",\n  headers: {\n    \"Authorization\": \"Bearer YOUR_API_KEY\",\n    \"Content-Type\": \"application/json\"\n  },\n  body: JSON.stringify({\n    example: \"value\"\n  })\n})\n  .then(response => response.json())\n  .then(data => console.log(data))\n  .catch(error => console.error(error));"
          },
          {
            "lang": "python",
            "label": "Python",
            "source": "import requests\n\nurl = \"https://api.joinformal.com/core.v1.ConnectorService/DeleteConnectorListener\"\nheaders = {\n    \"Authorization\": \"Bearer YOUR_API_KEY\",\n    \"Content-Type\": \"application/json\"\n}\ndata = {\n    \"example\": \"value\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())"
          },
          {
            "lang": "go",
            "label": "Go",
            "source": "package main\n\nimport (\n    \"bytes\"\n    \"encoding/json\"\n    \"fmt\"\n    \"io\"\n    \"net/http\"\n)\n\nfunc main() {\n    url := \"https://api.joinformal.com/core.v1.ConnectorService/DeleteConnectorListener\"\n\n    body := map[string]string{\n        \"example\": \"value\",\n    }\n\n    jsonData, _ := json.Marshal(body)\n\n    req, _ := http.NewRequest(\"POST\", url, bytes.NewBuffer(jsonData))\n    req.Header.Set(\"Authorization\", \"Bearer YOUR_API_KEY\")\n    req.Header.Set(\"Content-Type\", \"application/json\")\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        panic(err)\n    }\n    defer resp.Body.Close()\n\n    responseBody, _ := io.ReadAll(resp.Body)\n    fmt.Println(string(responseBody))\n}"
          }
        ]
      }
    },
    "/core.v1.ConnectorService/DeleteConnectorListenerLink": {
      "post": {
        "tags": [
          "core.v1.ConnectorService"
        ],
        "summary": "DeleteConnectorListenerLink",
        "operationId": "core.v1.ConnectorService.DeleteConnectorListenerLink",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/core.v1.DeleteConnectorListenerLinkRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/core.v1.DeleteConnectorListenerLinkResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid request parameters or body",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "invalid_request"
                    },
                    "message": {
                      "type": "string",
                      "example": "Invalid request parameters"
                    },
                    "details": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "unauthorized"
                    },
                    "message": {
                      "type": "string",
                      "example": "Authentication required"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "forbidden"
                    },
                    "message": {
                      "type": "string",
                      "example": "Insufficient permissions to perform this action"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "not_found"
                    },
                    "message": {
                      "type": "string",
                      "example": "Resource not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - An error occurred processing the request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "internal_error"
                    },
                    "message": {
                      "type": "string",
                      "example": "An internal error occurred"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "curl",
            "label": "cURL",
            "source": "curl -X POST \"https://api.joinformal.com/core.v1.ConnectorService/DeleteConnectorListenerLink\" \\\n  -H \"Authorization: Bearer YOUR_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"example\": \"value\"\n  }'"
          },
          {
            "lang": "javascript",
            "label": "JavaScript (fetch)",
            "source": "fetch(\"https://api.joinformal.com/core.v1.ConnectorService/DeleteConnectorListenerLink\", {\n  method: \"POST\",\n  headers: {\n    \"Authorization\": \"Bearer YOUR_API_KEY\",\n    \"Content-Type\": \"application/json\"\n  },\n  body: JSON.stringify({\n    example: \"value\"\n  })\n})\n  .then(response => response.json())\n  .then(data => console.log(data))\n  .catch(error => console.error(error));"
          },
          {
            "lang": "python",
            "label": "Python",
            "source": "import requests\n\nurl = \"https://api.joinformal.com/core.v1.ConnectorService/DeleteConnectorListenerLink\"\nheaders = {\n    \"Authorization\": \"Bearer YOUR_API_KEY\",\n    \"Content-Type\": \"application/json\"\n}\ndata = {\n    \"example\": \"value\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())"
          },
          {
            "lang": "go",
            "label": "Go",
            "source": "package main\n\nimport (\n    \"bytes\"\n    \"encoding/json\"\n    \"fmt\"\n    \"io\"\n    \"net/http\"\n)\n\nfunc main() {\n    url := \"https://api.joinformal.com/core.v1.ConnectorService/DeleteConnectorListenerLink\"\n\n    body := map[string]string{\n        \"example\": \"value\",\n    }\n\n    jsonData, _ := json.Marshal(body)\n\n    req, _ := http.NewRequest(\"POST\", url, bytes.NewBuffer(jsonData))\n    req.Header.Set(\"Authorization\", \"Bearer YOUR_API_KEY\")\n    req.Header.Set(\"Content-Type\", \"application/json\")\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        panic(err)\n    }\n    defer resp.Body.Close()\n\n    responseBody, _ := io.ReadAll(resp.Body)\n    fmt.Println(string(responseBody))\n}"
          }
        ]
      }
    },
    "/core.v1.ConnectorService/DeleteConnectorListenerRule": {
      "post": {
        "tags": [
          "core.v1.ConnectorService"
        ],
        "summary": "DeleteConnectorListenerRule",
        "operationId": "core.v1.ConnectorService.DeleteConnectorListenerRule",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/core.v1.DeleteConnectorListenerRuleRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/core.v1.DeleteConnectorListenerRuleResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid request parameters or body",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "invalid_request"
                    },
                    "message": {
                      "type": "string",
                      "example": "Invalid request parameters"
                    },
                    "details": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "unauthorized"
                    },
                    "message": {
                      "type": "string",
                      "example": "Authentication required"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "forbidden"
                    },
                    "message": {
                      "type": "string",
                      "example": "Insufficient permissions to perform this action"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "not_found"
                    },
                    "message": {
                      "type": "string",
                      "example": "Resource not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - An error occurred processing the request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "internal_error"
                    },
                    "message": {
                      "type": "string",
                      "example": "An internal error occurred"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "curl",
            "label": "cURL",
            "source": "curl -X POST \"https://api.joinformal.com/core.v1.ConnectorService/DeleteConnectorListenerRule\" \\\n  -H \"Authorization: Bearer YOUR_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"example\": \"value\"\n  }'"
          },
          {
            "lang": "javascript",
            "label": "JavaScript (fetch)",
            "source": "fetch(\"https://api.joinformal.com/core.v1.ConnectorService/DeleteConnectorListenerRule\", {\n  method: \"POST\",\n  headers: {\n    \"Authorization\": \"Bearer YOUR_API_KEY\",\n    \"Content-Type\": \"application/json\"\n  },\n  body: JSON.stringify({\n    example: \"value\"\n  })\n})\n  .then(response => response.json())\n  .then(data => console.log(data))\n  .catch(error => console.error(error));"
          },
          {
            "lang": "python",
            "label": "Python",
            "source": "import requests\n\nurl = \"https://api.joinformal.com/core.v1.ConnectorService/DeleteConnectorListenerRule\"\nheaders = {\n    \"Authorization\": \"Bearer YOUR_API_KEY\",\n    \"Content-Type\": \"application/json\"\n}\ndata = {\n    \"example\": \"value\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())"
          },
          {
            "lang": "go",
            "label": "Go",
            "source": "package main\n\nimport (\n    \"bytes\"\n    \"encoding/json\"\n    \"fmt\"\n    \"io\"\n    \"net/http\"\n)\n\nfunc main() {\n    url := \"https://api.joinformal.com/core.v1.ConnectorService/DeleteConnectorListenerRule\"\n\n    body := map[string]string{\n        \"example\": \"value\",\n    }\n\n    jsonData, _ := json.Marshal(body)\n\n    req, _ := http.NewRequest(\"POST\", url, bytes.NewBuffer(jsonData))\n    req.Header.Set(\"Authorization\", \"Bearer YOUR_API_KEY\")\n    req.Header.Set(\"Content-Type\", \"application/json\")\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        panic(err)\n    }\n    defer resp.Body.Close()\n\n    responseBody, _ := io.ReadAll(resp.Body)\n    fmt.Println(string(responseBody))\n}"
          }
        ]
      }
    },
    "/core.v1.ConnectorService/DeleteConnectorSatelliteLink": {
      "post": {
        "tags": [
          "core.v1.ConnectorService"
        ],
        "summary": "DeleteConnectorSatelliteLink",
        "description": "Delete Connector Satellite Link",
        "operationId": "core.v1.ConnectorService.DeleteConnectorSatelliteLink",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/core.v1.DeleteConnectorSatelliteLinkRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/core.v1.DeleteConnectorSatelliteLinkResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid request parameters or body",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "invalid_request"
                    },
                    "message": {
                      "type": "string",
                      "example": "Invalid request parameters"
                    },
                    "details": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "unauthorized"
                    },
                    "message": {
                      "type": "string",
                      "example": "Authentication required"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "forbidden"
                    },
                    "message": {
                      "type": "string",
                      "example": "Insufficient permissions to perform this action"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "not_found"
                    },
                    "message": {
                      "type": "string",
                      "example": "Resource not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - An error occurred processing the request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "internal_error"
                    },
                    "message": {
                      "type": "string",
                      "example": "An internal error occurred"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "curl",
            "label": "cURL",
            "source": "curl -X POST \"https://api.joinformal.com/core.v1.ConnectorService/DeleteConnectorSatelliteLink\" \\\n  -H \"Authorization: Bearer YOUR_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"example\": \"value\"\n  }'"
          },
          {
            "lang": "javascript",
            "label": "JavaScript (fetch)",
            "source": "fetch(\"https://api.joinformal.com/core.v1.ConnectorService/DeleteConnectorSatelliteLink\", {\n  method: \"POST\",\n  headers: {\n    \"Authorization\": \"Bearer YOUR_API_KEY\",\n    \"Content-Type\": \"application/json\"\n  },\n  body: JSON.stringify({\n    example: \"value\"\n  })\n})\n  .then(response => response.json())\n  .then(data => console.log(data))\n  .catch(error => console.error(error));"
          },
          {
            "lang": "python",
            "label": "Python",
            "source": "import requests\n\nurl = \"https://api.joinformal.com/core.v1.ConnectorService/DeleteConnectorSatelliteLink\"\nheaders = {\n    \"Authorization\": \"Bearer YOUR_API_KEY\",\n    \"Content-Type\": \"application/json\"\n}\ndata = {\n    \"example\": \"value\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())"
          },
          {
            "lang": "go",
            "label": "Go",
            "source": "package main\n\nimport (\n    \"bytes\"\n    \"encoding/json\"\n    \"fmt\"\n    \"io\"\n    \"net/http\"\n)\n\nfunc main() {\n    url := \"https://api.joinformal.com/core.v1.ConnectorService/DeleteConnectorSatelliteLink\"\n\n    body := map[string]string{\n        \"example\": \"value\",\n    }\n\n    jsonData, _ := json.Marshal(body)\n\n    req, _ := http.NewRequest(\"POST\", url, bytes.NewBuffer(jsonData))\n    req.Header.Set(\"Authorization\", \"Bearer YOUR_API_KEY\")\n    req.Header.Set(\"Content-Type\", \"application/json\")\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        panic(err)\n    }\n    defer resp.Body.Close()\n\n    responseBody, _ := io.ReadAll(resp.Body)\n    fmt.Println(string(responseBody))\n}"
          }
        ]
      }
    },
    "/core.v1.ConnectorService/GetConnector": {
      "post": {
        "tags": [
          "core.v1.ConnectorService"
        ],
        "summary": "GetConnector",
        "operationId": "core.v1.ConnectorService.GetConnector",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/core.v1.GetConnectorRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/core.v1.GetConnectorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid request parameters or body",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "invalid_request"
                    },
                    "message": {
                      "type": "string",
                      "example": "Invalid request parameters"
                    },
                    "details": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "unauthorized"
                    },
                    "message": {
                      "type": "string",
                      "example": "Authentication required"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "forbidden"
                    },
                    "message": {
                      "type": "string",
                      "example": "Insufficient permissions to perform this action"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "not_found"
                    },
                    "message": {
                      "type": "string",
                      "example": "Resource not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - An error occurred processing the request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "internal_error"
                    },
                    "message": {
                      "type": "string",
                      "example": "An internal error occurred"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "curl",
            "label": "cURL",
            "source": "curl -X POST \"https://api.joinformal.com/core.v1.ConnectorService/GetConnector\" \\\n  -H \"Authorization: Bearer YOUR_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"example\": \"value\"\n  }'"
          },
          {
            "lang": "javascript",
            "label": "JavaScript (fetch)",
            "source": "fetch(\"https://api.joinformal.com/core.v1.ConnectorService/GetConnector\", {\n  method: \"POST\",\n  headers: {\n    \"Authorization\": \"Bearer YOUR_API_KEY\",\n    \"Content-Type\": \"application/json\"\n  },\n  body: JSON.stringify({\n    example: \"value\"\n  })\n})\n  .then(response => response.json())\n  .then(data => console.log(data))\n  .catch(error => console.error(error));"
          },
          {
            "lang": "python",
            "label": "Python",
            "source": "import requests\n\nurl = \"https://api.joinformal.com/core.v1.ConnectorService/GetConnector\"\nheaders = {\n    \"Authorization\": \"Bearer YOUR_API_KEY\",\n    \"Content-Type\": \"application/json\"\n}\ndata = {\n    \"example\": \"value\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())"
          },
          {
            "lang": "go",
            "label": "Go",
            "source": "package main\n\nimport (\n    \"bytes\"\n    \"encoding/json\"\n    \"fmt\"\n    \"io\"\n    \"net/http\"\n)\n\nfunc main() {\n    url := \"https://api.joinformal.com/core.v1.ConnectorService/GetConnector\"\n\n    body := map[string]string{\n        \"example\": \"value\",\n    }\n\n    jsonData, _ := json.Marshal(body)\n\n    req, _ := http.NewRequest(\"POST\", url, bytes.NewBuffer(jsonData))\n    req.Header.Set(\"Authorization\", \"Bearer YOUR_API_KEY\")\n    req.Header.Set(\"Content-Type\", \"application/json\")\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        panic(err)\n    }\n    defer resp.Body.Close()\n\n    responseBody, _ := io.ReadAll(resp.Body)\n    fmt.Println(string(responseBody))\n}"
          }
        ]
      }
    },
    "/core.v1.ConnectorService/GetConnectorApiKey": {
      "post": {
        "tags": [
          "core.v1.ConnectorService"
        ],
        "summary": "GetConnectorApiKey",
        "operationId": "core.v1.ConnectorService.GetConnectorApiKey",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/core.v1.GetConnectorApiKeyRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/core.v1.GetConnectorApiKeyResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid request parameters or body",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "invalid_request"
                    },
                    "message": {
                      "type": "string",
                      "example": "Invalid request parameters"
                    },
                    "details": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "unauthorized"
                    },
                    "message": {
                      "type": "string",
                      "example": "Authentication required"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "forbidden"
                    },
                    "message": {
                      "type": "string",
                      "example": "Insufficient permissions to perform this action"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "not_found"
                    },
                    "message": {
                      "type": "string",
                      "example": "Resource not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - An error occurred processing the request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "internal_error"
                    },
                    "message": {
                      "type": "string",
                      "example": "An internal error occurred"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "curl",
            "label": "cURL",
            "source": "curl -X POST \"https://api.joinformal.com/core.v1.ConnectorService/GetConnectorApiKey\" \\\n  -H \"Authorization: Bearer YOUR_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"example\": \"value\"\n  }'"
          },
          {
            "lang": "javascript",
            "label": "JavaScript (fetch)",
            "source": "fetch(\"https://api.joinformal.com/core.v1.ConnectorService/GetConnectorApiKey\", {\n  method: \"POST\",\n  headers: {\n    \"Authorization\": \"Bearer YOUR_API_KEY\",\n    \"Content-Type\": \"application/json\"\n  },\n  body: JSON.stringify({\n    example: \"value\"\n  })\n})\n  .then(response => response.json())\n  .then(data => console.log(data))\n  .catch(error => console.error(error));"
          },
          {
            "lang": "python",
            "label": "Python",
            "source": "import requests\n\nurl = \"https://api.joinformal.com/core.v1.ConnectorService/GetConnectorApiKey\"\nheaders = {\n    \"Authorization\": \"Bearer YOUR_API_KEY\",\n    \"Content-Type\": \"application/json\"\n}\ndata = {\n    \"example\": \"value\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())"
          },
          {
            "lang": "go",
            "label": "Go",
            "source": "package main\n\nimport (\n    \"bytes\"\n    \"encoding/json\"\n    \"fmt\"\n    \"io\"\n    \"net/http\"\n)\n\nfunc main() {\n    url := \"https://api.joinformal.com/core.v1.ConnectorService/GetConnectorApiKey\"\n\n    body := map[string]string{\n        \"example\": \"value\",\n    }\n\n    jsonData, _ := json.Marshal(body)\n\n    req, _ := http.NewRequest(\"POST\", url, bytes.NewBuffer(jsonData))\n    req.Header.Set(\"Authorization\", \"Bearer YOUR_API_KEY\")\n    req.Header.Set(\"Content-Type\", \"application/json\")\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        panic(err)\n    }\n    defer resp.Body.Close()\n\n    responseBody, _ := io.ReadAll(resp.Body)\n    fmt.Println(string(responseBody))\n}"
          }
        ]
      }
    },
    "/core.v1.ConnectorService/GetConnectorConfiguration": {
      "post": {
        "tags": [
          "core.v1.ConnectorService"
        ],
        "summary": "GetConnectorConfiguration",
        "operationId": "core.v1.ConnectorService.GetConnectorConfiguration",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/core.v1.GetConnectorConfigurationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/core.v1.GetConnectorConfigurationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid request parameters or body",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "invalid_request"
                    },
                    "message": {
                      "type": "string",
                      "example": "Invalid request parameters"
                    },
                    "details": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "unauthorized"
                    },
                    "message": {
                      "type": "string",
                      "example": "Authentication required"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "forbidden"
                    },
                    "message": {
                      "type": "string",
                      "example": "Insufficient permissions to perform this action"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "not_found"
                    },
                    "message": {
                      "type": "string",
                      "example": "Resource not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - An error occurred processing the request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "internal_error"
                    },
                    "message": {
                      "type": "string",
                      "example": "An internal error occurred"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "curl",
            "label": "cURL",
            "source": "curl -X POST \"https://api.joinformal.com/core.v1.ConnectorService/GetConnectorConfiguration\" \\\n  -H \"Authorization: Bearer YOUR_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"example\": \"value\"\n  }'"
          },
          {
            "lang": "javascript",
            "label": "JavaScript (fetch)",
            "source": "fetch(\"https://api.joinformal.com/core.v1.ConnectorService/GetConnectorConfiguration\", {\n  method: \"POST\",\n  headers: {\n    \"Authorization\": \"Bearer YOUR_API_KEY\",\n    \"Content-Type\": \"application/json\"\n  },\n  body: JSON.stringify({\n    example: \"value\"\n  })\n})\n  .then(response => response.json())\n  .then(data => console.log(data))\n  .catch(error => console.error(error));"
          },
          {
            "lang": "python",
            "label": "Python",
            "source": "import requests\n\nurl = \"https://api.joinformal.com/core.v1.ConnectorService/GetConnectorConfiguration\"\nheaders = {\n    \"Authorization\": \"Bearer YOUR_API_KEY\",\n    \"Content-Type\": \"application/json\"\n}\ndata = {\n    \"example\": \"value\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())"
          },
          {
            "lang": "go",
            "label": "Go",
            "source": "package main\n\nimport (\n    \"bytes\"\n    \"encoding/json\"\n    \"fmt\"\n    \"io\"\n    \"net/http\"\n)\n\nfunc main() {\n    url := \"https://api.joinformal.com/core.v1.ConnectorService/GetConnectorConfiguration\"\n\n    body := map[string]string{\n        \"example\": \"value\",\n    }\n\n    jsonData, _ := json.Marshal(body)\n\n    req, _ := http.NewRequest(\"POST\", url, bytes.NewBuffer(jsonData))\n    req.Header.Set(\"Authorization\", \"Bearer YOUR_API_KEY\")\n    req.Header.Set(\"Content-Type\", \"application/json\")\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        panic(err)\n    }\n    defer resp.Body.Close()\n\n    responseBody, _ := io.ReadAll(resp.Body)\n    fmt.Println(string(responseBody))\n}"
          }
        ]
      }
    },
    "/core.v1.ConnectorService/GetConnectorConfigurationByConnectorId": {
      "post": {
        "tags": [
          "core.v1.ConnectorService"
        ],
        "summary": "GetConnectorConfigurationByConnectorId",
        "operationId": "core.v1.ConnectorService.GetConnectorConfigurationByConnectorId",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/core.v1.GetConnectorConfigurationByConnectorIdRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/core.v1.GetConnectorConfigurationByConnectorIdResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid request parameters or body",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "invalid_request"
                    },
                    "message": {
                      "type": "string",
                      "example": "Invalid request parameters"
                    },
                    "details": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "unauthorized"
                    },
                    "message": {
                      "type": "string",
                      "example": "Authentication required"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "forbidden"
                    },
                    "message": {
                      "type": "string",
                      "example": "Insufficient permissions to perform this action"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "not_found"
                    },
                    "message": {
                      "type": "string",
                      "example": "Resource not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - An error occurred processing the request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "internal_error"
                    },
                    "message": {
                      "type": "string",
                      "example": "An internal error occurred"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "curl",
            "label": "cURL",
            "source": "curl -X POST \"https://api.joinformal.com/core.v1.ConnectorService/GetConnectorConfigurationByConnectorId\" \\\n  -H \"Authorization: Bearer YOUR_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"example\": \"value\"\n  }'"
          },
          {
            "lang": "javascript",
            "label": "JavaScript (fetch)",
            "source": "fetch(\"https://api.joinformal.com/core.v1.ConnectorService/GetConnectorConfigurationByConnectorId\", {\n  method: \"POST\",\n  headers: {\n    \"Authorization\": \"Bearer YOUR_API_KEY\",\n    \"Content-Type\": \"application/json\"\n  },\n  body: JSON.stringify({\n    example: \"value\"\n  })\n})\n  .then(response => response.json())\n  .then(data => console.log(data))\n  .catch(error => console.error(error));"
          },
          {
            "lang": "python",
            "label": "Python",
            "source": "import requests\n\nurl = \"https://api.joinformal.com/core.v1.ConnectorService/GetConnectorConfigurationByConnectorId\"\nheaders = {\n    \"Authorization\": \"Bearer YOUR_API_KEY\",\n    \"Content-Type\": \"application/json\"\n}\ndata = {\n    \"example\": \"value\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())"
          },
          {
            "lang": "go",
            "label": "Go",
            "source": "package main\n\nimport (\n    \"bytes\"\n    \"encoding/json\"\n    \"fmt\"\n    \"io\"\n    \"net/http\"\n)\n\nfunc main() {\n    url := \"https://api.joinformal.com/core.v1.ConnectorService/GetConnectorConfigurationByConnectorId\"\n\n    body := map[string]string{\n        \"example\": \"value\",\n    }\n\n    jsonData, _ := json.Marshal(body)\n\n    req, _ := http.NewRequest(\"POST\", url, bytes.NewBuffer(jsonData))\n    req.Header.Set(\"Authorization\", \"Bearer YOUR_API_KEY\")\n    req.Header.Set(\"Content-Type\", \"application/json\")\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        panic(err)\n    }\n    defer resp.Body.Close()\n\n    responseBody, _ := io.ReadAll(resp.Body)\n    fmt.Println(string(responseBody))\n}"
          }
        ]
      }
    },
    "/core.v1.ConnectorService/GetConnectorHostname": {
      "post": {
        "tags": [
          "core.v1.ConnectorService"
        ],
        "summary": "GetConnectorHostname",
        "operationId": "core.v1.ConnectorService.GetConnectorHostname",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/core.v1.GetConnectorHostnameRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/core.v1.GetConnectorHostnameResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid request parameters or body",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "invalid_request"
                    },
                    "message": {
                      "type": "string",
                      "example": "Invalid request parameters"
                    },
                    "details": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "unauthorized"
                    },
                    "message": {
                      "type": "string",
                      "example": "Authentication required"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "forbidden"
                    },
                    "message": {
                      "type": "string",
                      "example": "Insufficient permissions to perform this action"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "not_found"
                    },
                    "message": {
                      "type": "string",
                      "example": "Resource not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - An error occurred processing the request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "internal_error"
                    },
                    "message": {
                      "type": "string",
                      "example": "An internal error occurred"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "curl",
            "label": "cURL",
            "source": "curl -X POST \"https://api.joinformal.com/core.v1.ConnectorService/GetConnectorHostname\" \\\n  -H \"Authorization: Bearer YOUR_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"example\": \"value\"\n  }'"
          },
          {
            "lang": "javascript",
            "label": "JavaScript (fetch)",
            "source": "fetch(\"https://api.joinformal.com/core.v1.ConnectorService/GetConnectorHostname\", {\n  method: \"POST\",\n  headers: {\n    \"Authorization\": \"Bearer YOUR_API_KEY\",\n    \"Content-Type\": \"application/json\"\n  },\n  body: JSON.stringify({\n    example: \"value\"\n  })\n})\n  .then(response => response.json())\n  .then(data => console.log(data))\n  .catch(error => console.error(error));"
          },
          {
            "lang": "python",
            "label": "Python",
            "source": "import requests\n\nurl = \"https://api.joinformal.com/core.v1.ConnectorService/GetConnectorHostname\"\nheaders = {\n    \"Authorization\": \"Bearer YOUR_API_KEY\",\n    \"Content-Type\": \"application/json\"\n}\ndata = {\n    \"example\": \"value\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())"
          },
          {
            "lang": "go",
            "label": "Go",
            "source": "package main\n\nimport (\n    \"bytes\"\n    \"encoding/json\"\n    \"fmt\"\n    \"io\"\n    \"net/http\"\n)\n\nfunc main() {\n    url := \"https://api.joinformal.com/core.v1.ConnectorService/GetConnectorHostname\"\n\n    body := map[string]string{\n        \"example\": \"value\",\n    }\n\n    jsonData, _ := json.Marshal(body)\n\n    req, _ := http.NewRequest(\"POST\", url, bytes.NewBuffer(jsonData))\n    req.Header.Set(\"Authorization\", \"Bearer YOUR_API_KEY\")\n    req.Header.Set(\"Content-Type\", \"application/json\")\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        panic(err)\n    }\n    defer resp.Body.Close()\n\n    responseBody, _ := io.ReadAll(resp.Body)\n    fmt.Println(string(responseBody))\n}"
          }
        ]
      }
    },
    "/core.v1.ConnectorService/GetConnectorListener": {
      "post": {
        "tags": [
          "core.v1.ConnectorService"
        ],
        "summary": "GetConnectorListener",
        "operationId": "core.v1.ConnectorService.GetConnectorListener",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/core.v1.GetConnectorListenerRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/core.v1.GetConnectorListenerResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid request parameters or body",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "invalid_request"
                    },
                    "message": {
                      "type": "string",
                      "example": "Invalid request parameters"
                    },
                    "details": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "unauthorized"
                    },
                    "message": {
                      "type": "string",
                      "example": "Authentication required"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "forbidden"
                    },
                    "message": {
                      "type": "string",
                      "example": "Insufficient permissions to perform this action"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "not_found"
                    },
                    "message": {
                      "type": "string",
                      "example": "Resource not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - An error occurred processing the request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "internal_error"
                    },
                    "message": {
                      "type": "string",
                      "example": "An internal error occurred"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "curl",
            "label": "cURL",
            "source": "curl -X POST \"https://api.joinformal.com/core.v1.ConnectorService/GetConnectorListener\" \\\n  -H \"Authorization: Bearer YOUR_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"example\": \"value\"\n  }'"
          },
          {
            "lang": "javascript",
            "label": "JavaScript (fetch)",
            "source": "fetch(\"https://api.joinformal.com/core.v1.ConnectorService/GetConnectorListener\", {\n  method: \"POST\",\n  headers: {\n    \"Authorization\": \"Bearer YOUR_API_KEY\",\n    \"Content-Type\": \"application/json\"\n  },\n  body: JSON.stringify({\n    example: \"value\"\n  })\n})\n  .then(response => response.json())\n  .then(data => console.log(data))\n  .catch(error => console.error(error));"
          },
          {
            "lang": "python",
            "label": "Python",
            "source": "import requests\n\nurl = \"https://api.joinformal.com/core.v1.ConnectorService/GetConnectorListener\"\nheaders = {\n    \"Authorization\": \"Bearer YOUR_API_KEY\",\n    \"Content-Type\": \"application/json\"\n}\ndata = {\n    \"example\": \"value\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())"
          },
          {
            "lang": "go",
            "label": "Go",
            "source": "package main\n\nimport (\n    \"bytes\"\n    \"encoding/json\"\n    \"fmt\"\n    \"io\"\n    \"net/http\"\n)\n\nfunc main() {\n    url := \"https://api.joinformal.com/core.v1.ConnectorService/GetConnectorListener\"\n\n    body := map[string]string{\n        \"example\": \"value\",\n    }\n\n    jsonData, _ := json.Marshal(body)\n\n    req, _ := http.NewRequest(\"POST\", url, bytes.NewBuffer(jsonData))\n    req.Header.Set(\"Authorization\", \"Bearer YOUR_API_KEY\")\n    req.Header.Set(\"Content-Type\", \"application/json\")\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        panic(err)\n    }\n    defer resp.Body.Close()\n\n    responseBody, _ := io.ReadAll(resp.Body)\n    fmt.Println(string(responseBody))\n}"
          }
        ]
      }
    },
    "/core.v1.ConnectorService/GetConnectorListenerLink": {
      "post": {
        "tags": [
          "core.v1.ConnectorService"
        ],
        "summary": "GetConnectorListenerLink",
        "operationId": "core.v1.ConnectorService.GetConnectorListenerLink",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/core.v1.GetConnectorListenerLinkRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/core.v1.GetConnectorListenerLinkResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid request parameters or body",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "invalid_request"
                    },
                    "message": {
                      "type": "string",
                      "example": "Invalid request parameters"
                    },
                    "details": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "unauthorized"
                    },
                    "message": {
                      "type": "string",
                      "example": "Authentication required"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "forbidden"
                    },
                    "message": {
                      "type": "string",
                      "example": "Insufficient permissions to perform this action"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "not_found"
                    },
                    "message": {
                      "type": "string",
                      "example": "Resource not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - An error occurred processing the request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "internal_error"
                    },
                    "message": {
                      "type": "string",
                      "example": "An internal error occurred"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "curl",
            "label": "cURL",
            "source": "curl -X POST \"https://api.joinformal.com/core.v1.ConnectorService/GetConnectorListenerLink\" \\\n  -H \"Authorization: Bearer YOUR_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"example\": \"value\"\n  }'"
          },
          {
            "lang": "javascript",
            "label": "JavaScript (fetch)",
            "source": "fetch(\"https://api.joinformal.com/core.v1.ConnectorService/GetConnectorListenerLink\", {\n  method: \"POST\",\n  headers: {\n    \"Authorization\": \"Bearer YOUR_API_KEY\",\n    \"Content-Type\": \"application/json\"\n  },\n  body: JSON.stringify({\n    example: \"value\"\n  })\n})\n  .then(response => response.json())\n  .then(data => console.log(data))\n  .catch(error => console.error(error));"
          },
          {
            "lang": "python",
            "label": "Python",
            "source": "import requests\n\nurl = \"https://api.joinformal.com/core.v1.ConnectorService/GetConnectorListenerLink\"\nheaders = {\n    \"Authorization\": \"Bearer YOUR_API_KEY\",\n    \"Content-Type\": \"application/json\"\n}\ndata = {\n    \"example\": \"value\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())"
          },
          {
            "lang": "go",
            "label": "Go",
            "source": "package main\n\nimport (\n    \"bytes\"\n    \"encoding/json\"\n    \"fmt\"\n    \"io\"\n    \"net/http\"\n)\n\nfunc main() {\n    url := \"https://api.joinformal.com/core.v1.ConnectorService/GetConnectorListenerLink\"\n\n    body := map[string]string{\n        \"example\": \"value\",\n    }\n\n    jsonData, _ := json.Marshal(body)\n\n    req, _ := http.NewRequest(\"POST\", url, bytes.NewBuffer(jsonData))\n    req.Header.Set(\"Authorization\", \"Bearer YOUR_API_KEY\")\n    req.Header.Set(\"Content-Type\", \"application/json\")\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        panic(err)\n    }\n    defer resp.Body.Close()\n\n    responseBody, _ := io.ReadAll(resp.Body)\n    fmt.Println(string(responseBody))\n}"
          }
        ]
      }
    },
    "/core.v1.ConnectorService/GetConnectorListenerRule": {
      "post": {
        "tags": [
          "core.v1.ConnectorService"
        ],
        "summary": "GetConnectorListenerRule",
        "operationId": "core.v1.ConnectorService.GetConnectorListenerRule",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/core.v1.GetConnectorListenerRuleRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/core.v1.GetConnectorListenerRuleResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid request parameters or body",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "invalid_request"
                    },
                    "message": {
                      "type": "string",
                      "example": "Invalid request parameters"
                    },
                    "details": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "unauthorized"
                    },
                    "message": {
                      "type": "string",
                      "example": "Authentication required"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "forbidden"
                    },
                    "message": {
                      "type": "string",
                      "example": "Insufficient permissions to perform this action"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "not_found"
                    },
                    "message": {
                      "type": "string",
                      "example": "Resource not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - An error occurred processing the request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "internal_error"
                    },
                    "message": {
                      "type": "string",
                      "example": "An internal error occurred"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "curl",
            "label": "cURL",
            "source": "curl -X POST \"https://api.joinformal.com/core.v1.ConnectorService/GetConnectorListenerRule\" \\\n  -H \"Authorization: Bearer YOUR_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"example\": \"value\"\n  }'"
          },
          {
            "lang": "javascript",
            "label": "JavaScript (fetch)",
            "source": "fetch(\"https://api.joinformal.com/core.v1.ConnectorService/GetConnectorListenerRule\", {\n  method: \"POST\",\n  headers: {\n    \"Authorization\": \"Bearer YOUR_API_KEY\",\n    \"Content-Type\": \"application/json\"\n  },\n  body: JSON.stringify({\n    example: \"value\"\n  })\n})\n  .then(response => response.json())\n  .then(data => console.log(data))\n  .catch(error => console.error(error));"
          },
          {
            "lang": "python",
            "label": "Python",
            "source": "import requests\n\nurl = \"https://api.joinformal.com/core.v1.ConnectorService/GetConnectorListenerRule\"\nheaders = {\n    \"Authorization\": \"Bearer YOUR_API_KEY\",\n    \"Content-Type\": \"application/json\"\n}\ndata = {\n    \"example\": \"value\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())"
          },
          {
            "lang": "go",
            "label": "Go",
            "source": "package main\n\nimport (\n    \"bytes\"\n    \"encoding/json\"\n    \"fmt\"\n    \"io\"\n    \"net/http\"\n)\n\nfunc main() {\n    url := \"https://api.joinformal.com/core.v1.ConnectorService/GetConnectorListenerRule\"\n\n    body := map[string]string{\n        \"example\": \"value\",\n    }\n\n    jsonData, _ := json.Marshal(body)\n\n    req, _ := http.NewRequest(\"POST\", url, bytes.NewBuffer(jsonData))\n    req.Header.Set(\"Authorization\", \"Bearer YOUR_API_KEY\")\n    req.Header.Set(\"Content-Type\", \"application/json\")\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        panic(err)\n    }\n    defer resp.Body.Close()\n\n    responseBody, _ := io.ReadAll(resp.Body)\n    fmt.Println(string(responseBody))\n}"
          }
        ]
      }
    },
    "/core.v1.ConnectorService/GetConnectorSatelliteLink": {
      "post": {
        "tags": [
          "core.v1.ConnectorService"
        ],
        "summary": "GetConnectorSatelliteLink",
        "description": "Get Connector Satellite Link",
        "operationId": "core.v1.ConnectorService.GetConnectorSatelliteLink",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/core.v1.GetConnectorSatelliteLinkRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/core.v1.GetConnectorSatelliteLinkResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid request parameters or body",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "invalid_request"
                    },
                    "message": {
                      "type": "string",
                      "example": "Invalid request parameters"
                    },
                    "details": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "unauthorized"
                    },
                    "message": {
                      "type": "string",
                      "example": "Authentication required"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "forbidden"
                    },
                    "message": {
                      "type": "string",
                      "example": "Insufficient permissions to perform this action"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "not_found"
                    },
                    "message": {
                      "type": "string",
                      "example": "Resource not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - An error occurred processing the request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "internal_error"
                    },
                    "message": {
                      "type": "string",
                      "example": "An internal error occurred"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "curl",
            "label": "cURL",
            "source": "curl -X POST \"https://api.joinformal.com/core.v1.ConnectorService/GetConnectorSatelliteLink\" \\\n  -H \"Authorization: Bearer YOUR_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"example\": \"value\"\n  }'"
          },
          {
            "lang": "javascript",
            "label": "JavaScript (fetch)",
            "source": "fetch(\"https://api.joinformal.com/core.v1.ConnectorService/GetConnectorSatelliteLink\", {\n  method: \"POST\",\n  headers: {\n    \"Authorization\": \"Bearer YOUR_API_KEY\",\n    \"Content-Type\": \"application/json\"\n  },\n  body: JSON.stringify({\n    example: \"value\"\n  })\n})\n  .then(response => response.json())\n  .then(data => console.log(data))\n  .catch(error => console.error(error));"
          },
          {
            "lang": "python",
            "label": "Python",
            "source": "import requests\n\nurl = \"https://api.joinformal.com/core.v1.ConnectorService/GetConnectorSatelliteLink\"\nheaders = {\n    \"Authorization\": \"Bearer YOUR_API_KEY\",\n    \"Content-Type\": \"application/json\"\n}\ndata = {\n    \"example\": \"value\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())"
          },
          {
            "lang": "go",
            "label": "Go",
            "source": "package main\n\nimport (\n    \"bytes\"\n    \"encoding/json\"\n    \"fmt\"\n    \"io\"\n    \"net/http\"\n)\n\nfunc main() {\n    url := \"https://api.joinformal.com/core.v1.ConnectorService/GetConnectorSatelliteLink\"\n\n    body := map[string]string{\n        \"example\": \"value\",\n    }\n\n    jsonData, _ := json.Marshal(body)\n\n    req, _ := http.NewRequest(\"POST\", url, bytes.NewBuffer(jsonData))\n    req.Header.Set(\"Authorization\", \"Bearer YOUR_API_KEY\")\n    req.Header.Set(\"Content-Type\", \"application/json\")\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        panic(err)\n    }\n    defer resp.Body.Close()\n\n    responseBody, _ := io.ReadAll(resp.Body)\n    fmt.Println(string(responseBody))\n}"
          }
        ]
      }
    },
    "/core.v1.ConnectorService/ListConnectorInstances": {
      "post": {
        "tags": [
          "core.v1.ConnectorService"
        ],
        "summary": "ListConnectorInstances",
        "operationId": "core.v1.ConnectorService.ListConnectorInstances",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/core.v1.ListConnectorInstancesRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/core.v1.ListConnectorInstancesResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid request parameters or body",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "invalid_request"
                    },
                    "message": {
                      "type": "string",
                      "example": "Invalid request parameters"
                    },
                    "details": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "unauthorized"
                    },
                    "message": {
                      "type": "string",
                      "example": "Authentication required"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "forbidden"
                    },
                    "message": {
                      "type": "string",
                      "example": "Insufficient permissions to perform this action"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "not_found"
                    },
                    "message": {
                      "type": "string",
                      "example": "Resource not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - An error occurred processing the request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "internal_error"
                    },
                    "message": {
                      "type": "string",
                      "example": "An internal error occurred"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "curl",
            "label": "cURL",
            "source": "curl -X POST \"https://api.joinformal.com/core.v1.ConnectorService/ListConnectorInstances\" \\\n  -H \"Authorization: Bearer YOUR_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"example\": \"value\"\n  }'"
          },
          {
            "lang": "javascript",
            "label": "JavaScript (fetch)",
            "source": "fetch(\"https://api.joinformal.com/core.v1.ConnectorService/ListConnectorInstances\", {\n  method: \"POST\",\n  headers: {\n    \"Authorization\": \"Bearer YOUR_API_KEY\",\n    \"Content-Type\": \"application/json\"\n  },\n  body: JSON.stringify({\n    example: \"value\"\n  })\n})\n  .then(response => response.json())\n  .then(data => console.log(data))\n  .catch(error => console.error(error));"
          },
          {
            "lang": "python",
            "label": "Python",
            "source": "import requests\n\nurl = \"https://api.joinformal.com/core.v1.ConnectorService/ListConnectorInstances\"\nheaders = {\n    \"Authorization\": \"Bearer YOUR_API_KEY\",\n    \"Content-Type\": \"application/json\"\n}\ndata = {\n    \"example\": \"value\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())"
          },
          {
            "lang": "go",
            "label": "Go",
            "source": "package main\n\nimport (\n    \"bytes\"\n    \"encoding/json\"\n    \"fmt\"\n    \"io\"\n    \"net/http\"\n)\n\nfunc main() {\n    url := \"https://api.joinformal.com/core.v1.ConnectorService/ListConnectorInstances\"\n\n    body := map[string]string{\n        \"example\": \"value\",\n    }\n\n    jsonData, _ := json.Marshal(body)\n\n    req, _ := http.NewRequest(\"POST\", url, bytes.NewBuffer(jsonData))\n    req.Header.Set(\"Authorization\", \"Bearer YOUR_API_KEY\")\n    req.Header.Set(\"Content-Type\", \"application/json\")\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        panic(err)\n    }\n    defer resp.Body.Close()\n\n    responseBody, _ := io.ReadAll(resp.Body)\n    fmt.Println(string(responseBody))\n}"
          }
        ]
      }
    },
    "/core.v1.ConnectorService/ListConnectorListenerLinks": {
      "post": {
        "tags": [
          "core.v1.ConnectorService"
        ],
        "summary": "ListConnectorListenerLinks",
        "operationId": "core.v1.ConnectorService.ListConnectorListenerLinks",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/core.v1.ListConnectorListenerLinksRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/core.v1.ListConnectorListenerLinksResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid request parameters or body",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "invalid_request"
                    },
                    "message": {
                      "type": "string",
                      "example": "Invalid request parameters"
                    },
                    "details": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "unauthorized"
                    },
                    "message": {
                      "type": "string",
                      "example": "Authentication required"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "forbidden"
                    },
                    "message": {
                      "type": "string",
                      "example": "Insufficient permissions to perform this action"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "not_found"
                    },
                    "message": {
                      "type": "string",
                      "example": "Resource not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - An error occurred processing the request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "internal_error"
                    },
                    "message": {
                      "type": "string",
                      "example": "An internal error occurred"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "curl",
            "label": "cURL",
            "source": "curl -X POST \"https://api.joinformal.com/core.v1.ConnectorService/ListConnectorListenerLinks\" \\\n  -H \"Authorization: Bearer YOUR_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"example\": \"value\"\n  }'"
          },
          {
            "lang": "javascript",
            "label": "JavaScript (fetch)",
            "source": "fetch(\"https://api.joinformal.com/core.v1.ConnectorService/ListConnectorListenerLinks\", {\n  method: \"POST\",\n  headers: {\n    \"Authorization\": \"Bearer YOUR_API_KEY\",\n    \"Content-Type\": \"application/json\"\n  },\n  body: JSON.stringify({\n    example: \"value\"\n  })\n})\n  .then(response => response.json())\n  .then(data => console.log(data))\n  .catch(error => console.error(error));"
          },
          {
            "lang": "python",
            "label": "Python",
            "source": "import requests\n\nurl = \"https://api.joinformal.com/core.v1.ConnectorService/ListConnectorListenerLinks\"\nheaders = {\n    \"Authorization\": \"Bearer YOUR_API_KEY\",\n    \"Content-Type\": \"application/json\"\n}\ndata = {\n    \"example\": \"value\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())"
          },
          {
            "lang": "go",
            "label": "Go",
            "source": "package main\n\nimport (\n    \"bytes\"\n    \"encoding/json\"\n    \"fmt\"\n    \"io\"\n    \"net/http\"\n)\n\nfunc main() {\n    url := \"https://api.joinformal.com/core.v1.ConnectorService/ListConnectorListenerLinks\"\n\n    body := map[string]string{\n        \"example\": \"value\",\n    }\n\n    jsonData, _ := json.Marshal(body)\n\n    req, _ := http.NewRequest(\"POST\", url, bytes.NewBuffer(jsonData))\n    req.Header.Set(\"Authorization\", \"Bearer YOUR_API_KEY\")\n    req.Header.Set(\"Content-Type\", \"application/json\")\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        panic(err)\n    }\n    defer resp.Body.Close()\n\n    responseBody, _ := io.ReadAll(resp.Body)\n    fmt.Println(string(responseBody))\n}"
          }
        ]
      }
    },
    "/core.v1.ConnectorService/ListConnectorListenerRules": {
      "post": {
        "tags": [
          "core.v1.ConnectorService"
        ],
        "summary": "ListConnectorListenerRules",
        "operationId": "core.v1.ConnectorService.ListConnectorListenerRules",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/core.v1.ListConnectorListenerRulesRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/core.v1.ListConnectorListenerRulesResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid request parameters or body",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "invalid_request"
                    },
                    "message": {
                      "type": "string",
                      "example": "Invalid request parameters"
                    },
                    "details": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "unauthorized"
                    },
                    "message": {
                      "type": "string",
                      "example": "Authentication required"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "forbidden"
                    },
                    "message": {
                      "type": "string",
                      "example": "Insufficient permissions to perform this action"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "not_found"
                    },
                    "message": {
                      "type": "string",
                      "example": "Resource not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - An error occurred processing the request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "internal_error"
                    },
                    "message": {
                      "type": "string",
                      "example": "An internal error occurred"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "curl",
            "label": "cURL",
            "source": "curl -X POST \"https://api.joinformal.com/core.v1.ConnectorService/ListConnectorListenerRules\" \\\n  -H \"Authorization: Bearer YOUR_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"example\": \"value\"\n  }'"
          },
          {
            "lang": "javascript",
            "label": "JavaScript (fetch)",
            "source": "fetch(\"https://api.joinformal.com/core.v1.ConnectorService/ListConnectorListenerRules\", {\n  method: \"POST\",\n  headers: {\n    \"Authorization\": \"Bearer YOUR_API_KEY\",\n    \"Content-Type\": \"application/json\"\n  },\n  body: JSON.stringify({\n    example: \"value\"\n  })\n})\n  .then(response => response.json())\n  .then(data => console.log(data))\n  .catch(error => console.error(error));"
          },
          {
            "lang": "python",
            "label": "Python",
            "source": "import requests\n\nurl = \"https://api.joinformal.com/core.v1.ConnectorService/ListConnectorListenerRules\"\nheaders = {\n    \"Authorization\": \"Bearer YOUR_API_KEY\",\n    \"Content-Type\": \"application/json\"\n}\ndata = {\n    \"example\": \"value\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())"
          },
          {
            "lang": "go",
            "label": "Go",
            "source": "package main\n\nimport (\n    \"bytes\"\n    \"encoding/json\"\n    \"fmt\"\n    \"io\"\n    \"net/http\"\n)\n\nfunc main() {\n    url := \"https://api.joinformal.com/core.v1.ConnectorService/ListConnectorListenerRules\"\n\n    body := map[string]string{\n        \"example\": \"value\",\n    }\n\n    jsonData, _ := json.Marshal(body)\n\n    req, _ := http.NewRequest(\"POST\", url, bytes.NewBuffer(jsonData))\n    req.Header.Set(\"Authorization\", \"Bearer YOUR_API_KEY\")\n    req.Header.Set(\"Content-Type\", \"application/json\")\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        panic(err)\n    }\n    defer resp.Body.Close()\n\n    responseBody, _ := io.ReadAll(resp.Body)\n    fmt.Println(string(responseBody))\n}"
          }
        ]
      }
    },
    "/core.v1.ConnectorService/ListConnectorListeners": {
      "post": {
        "tags": [
          "core.v1.ConnectorService"
        ],
        "summary": "ListConnectorListeners",
        "operationId": "core.v1.ConnectorService.ListConnectorListeners",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/core.v1.ListConnectorListenersRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/core.v1.ListConnectorListenersResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid request parameters or body",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "invalid_request"
                    },
                    "message": {
                      "type": "string",
                      "example": "Invalid request parameters"
                    },
                    "details": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "unauthorized"
                    },
                    "message": {
                      "type": "string",
                      "example": "Authentication required"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "forbidden"
                    },
                    "message": {
                      "type": "string",
                      "example": "Insufficient permissions to perform this action"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "not_found"
                    },
                    "message": {
                      "type": "string",
                      "example": "Resource not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - An error occurred processing the request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "internal_error"
                    },
                    "message": {
                      "type": "string",
                      "example": "An internal error occurred"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "curl",
            "label": "cURL",
            "source": "curl -X POST \"https://api.joinformal.com/core.v1.ConnectorService/ListConnectorListeners\" \\\n  -H \"Authorization: Bearer YOUR_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"example\": \"value\"\n  }'"
          },
          {
            "lang": "javascript",
            "label": "JavaScript (fetch)",
            "source": "fetch(\"https://api.joinformal.com/core.v1.ConnectorService/ListConnectorListeners\", {\n  method: \"POST\",\n  headers: {\n    \"Authorization\": \"Bearer YOUR_API_KEY\",\n    \"Content-Type\": \"application/json\"\n  },\n  body: JSON.stringify({\n    example: \"value\"\n  })\n})\n  .then(response => response.json())\n  .then(data => console.log(data))\n  .catch(error => console.error(error));"
          },
          {
            "lang": "python",
            "label": "Python",
            "source": "import requests\n\nurl = \"https://api.joinformal.com/core.v1.ConnectorService/ListConnectorListeners\"\nheaders = {\n    \"Authorization\": \"Bearer YOUR_API_KEY\",\n    \"Content-Type\": \"application/json\"\n}\ndata = {\n    \"example\": \"value\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())"
          },
          {
            "lang": "go",
            "label": "Go",
            "source": "package main\n\nimport (\n    \"bytes\"\n    \"encoding/json\"\n    \"fmt\"\n    \"io\"\n    \"net/http\"\n)\n\nfunc main() {\n    url := \"https://api.joinformal.com/core.v1.ConnectorService/ListConnectorListeners\"\n\n    body := map[string]string{\n        \"example\": \"value\",\n    }\n\n    jsonData, _ := json.Marshal(body)\n\n    req, _ := http.NewRequest(\"POST\", url, bytes.NewBuffer(jsonData))\n    req.Header.Set(\"Authorization\", \"Bearer YOUR_API_KEY\")\n    req.Header.Set(\"Content-Type\", \"application/json\")\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        panic(err)\n    }\n    defer resp.Body.Close()\n\n    responseBody, _ := io.ReadAll(resp.Body)\n    fmt.Println(string(responseBody))\n}"
          }
        ]
      }
    },
    "/core.v1.ConnectorService/ListConnectorSatelliteLinks": {
      "post": {
        "tags": [
          "core.v1.ConnectorService"
        ],
        "summary": "ListConnectorSatelliteLinks",
        "description": "List Connector Satellite Links",
        "operationId": "core.v1.ConnectorService.ListConnectorSatelliteLinks",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/core.v1.ListConnectorSatelliteLinksRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/core.v1.ListConnectorSatelliteLinksResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid request parameters or body",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "invalid_request"
                    },
                    "message": {
                      "type": "string",
                      "example": "Invalid request parameters"
                    },
                    "details": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "unauthorized"
                    },
                    "message": {
                      "type": "string",
                      "example": "Authentication required"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "forbidden"
                    },
                    "message": {
                      "type": "string",
                      "example": "Insufficient permissions to perform this action"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "not_found"
                    },
                    "message": {
                      "type": "string",
                      "example": "Resource not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - An error occurred processing the request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "internal_error"
                    },
                    "message": {
                      "type": "string",
                      "example": "An internal error occurred"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "curl",
            "label": "cURL",
            "source": "curl -X POST \"https://api.joinformal.com/core.v1.ConnectorService/ListConnectorSatelliteLinks\" \\\n  -H \"Authorization: Bearer YOUR_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"example\": \"value\"\n  }'"
          },
          {
            "lang": "javascript",
            "label": "JavaScript (fetch)",
            "source": "fetch(\"https://api.joinformal.com/core.v1.ConnectorService/ListConnectorSatelliteLinks\", {\n  method: \"POST\",\n  headers: {\n    \"Authorization\": \"Bearer YOUR_API_KEY\",\n    \"Content-Type\": \"application/json\"\n  },\n  body: JSON.stringify({\n    example: \"value\"\n  })\n})\n  .then(response => response.json())\n  .then(data => console.log(data))\n  .catch(error => console.error(error));"
          },
          {
            "lang": "python",
            "label": "Python",
            "source": "import requests\n\nurl = \"https://api.joinformal.com/core.v1.ConnectorService/ListConnectorSatelliteLinks\"\nheaders = {\n    \"Authorization\": \"Bearer YOUR_API_KEY\",\n    \"Content-Type\": \"application/json\"\n}\ndata = {\n    \"example\": \"value\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())"
          },
          {
            "lang": "go",
            "label": "Go",
            "source": "package main\n\nimport (\n    \"bytes\"\n    \"encoding/json\"\n    \"fmt\"\n    \"io\"\n    \"net/http\"\n)\n\nfunc main() {\n    url := \"https://api.joinformal.com/core.v1.ConnectorService/ListConnectorSatelliteLinks\"\n\n    body := map[string]string{\n        \"example\": \"value\",\n    }\n\n    jsonData, _ := json.Marshal(body)\n\n    req, _ := http.NewRequest(\"POST\", url, bytes.NewBuffer(jsonData))\n    req.Header.Set(\"Authorization\", \"Bearer YOUR_API_KEY\")\n    req.Header.Set(\"Content-Type\", \"application/json\")\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        panic(err)\n    }\n    defer resp.Body.Close()\n\n    responseBody, _ := io.ReadAll(resp.Body)\n    fmt.Println(string(responseBody))\n}"
          }
        ]
      }
    },
    "/core.v1.ConnectorService/ListConnectors": {
      "post": {
        "tags": [
          "core.v1.ConnectorService"
        ],
        "summary": "ListConnectors",
        "operationId": "core.v1.ConnectorService.ListConnectors",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/core.v1.ListConnectorsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/core.v1.ListConnectorsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid request parameters or body",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "invalid_request"
                    },
                    "message": {
                      "type": "string",
                      "example": "Invalid request parameters"
                    },
                    "details": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "unauthorized"
                    },
                    "message": {
                      "type": "string",
                      "example": "Authentication required"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "forbidden"
                    },
                    "message": {
                      "type": "string",
                      "example": "Insufficient permissions to perform this action"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "not_found"
                    },
                    "message": {
                      "type": "string",
                      "example": "Resource not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - An error occurred processing the request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "internal_error"
                    },
                    "message": {
                      "type": "string",
                      "example": "An internal error occurred"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "curl",
            "label": "cURL",
            "source": "curl -X POST \"https://api.joinformal.com/core.v1.ConnectorService/ListConnectors\" \\\n  -H \"Authorization: Bearer YOUR_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"example\": \"value\"\n  }'"
          },
          {
            "lang": "javascript",
            "label": "JavaScript (fetch)",
            "source": "fetch(\"https://api.joinformal.com/core.v1.ConnectorService/ListConnectors\", {\n  method: \"POST\",\n  headers: {\n    \"Authorization\": \"Bearer YOUR_API_KEY\",\n    \"Content-Type\": \"application/json\"\n  },\n  body: JSON.stringify({\n    example: \"value\"\n  })\n})\n  .then(response => response.json())\n  .then(data => console.log(data))\n  .catch(error => console.error(error));"
          },
          {
            "lang": "python",
            "label": "Python",
            "source": "import requests\n\nurl = \"https://api.joinformal.com/core.v1.ConnectorService/ListConnectors\"\nheaders = {\n    \"Authorization\": \"Bearer YOUR_API_KEY\",\n    \"Content-Type\": \"application/json\"\n}\ndata = {\n    \"example\": \"value\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())"
          },
          {
            "lang": "go",
            "label": "Go",
            "source": "package main\n\nimport (\n    \"bytes\"\n    \"encoding/json\"\n    \"fmt\"\n    \"io\"\n    \"net/http\"\n)\n\nfunc main() {\n    url := \"https://api.joinformal.com/core.v1.ConnectorService/ListConnectors\"\n\n    body := map[string]string{\n        \"example\": \"value\",\n    }\n\n    jsonData, _ := json.Marshal(body)\n\n    req, _ := http.NewRequest(\"POST\", url, bytes.NewBuffer(jsonData))\n    req.Header.Set(\"Authorization\", \"Bearer YOUR_API_KEY\")\n    req.Header.Set(\"Content-Type\", \"application/json\")\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        panic(err)\n    }\n    defer resp.Body.Close()\n\n    responseBody, _ := io.ReadAll(resp.Body)\n    fmt.Println(string(responseBody))\n}"
          }
        ]
      }
    },
    "/core.v1.ConnectorService/UpdateConnector": {
      "post": {
        "tags": [
          "core.v1.ConnectorService"
        ],
        "summary": "UpdateConnector",
        "operationId": "core.v1.ConnectorService.UpdateConnector",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/core.v1.UpdateConnectorRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/core.v1.UpdateConnectorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid request parameters or body",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "invalid_request"
                    },
                    "message": {
                      "type": "string",
                      "example": "Invalid request parameters"
                    },
                    "details": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "unauthorized"
                    },
                    "message": {
                      "type": "string",
                      "example": "Authentication required"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "forbidden"
                    },
                    "message": {
                      "type": "string",
                      "example": "Insufficient permissions to perform this action"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "not_found"
                    },
                    "message": {
                      "type": "string",
                      "example": "Resource not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - An error occurred processing the request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "internal_error"
                    },
                    "message": {
                      "type": "string",
                      "example": "An internal error occurred"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "curl",
            "label": "cURL",
            "source": "curl -X POST \"https://api.joinformal.com/core.v1.ConnectorService/UpdateConnector\" \\\n  -H \"Authorization: Bearer YOUR_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"example\": \"value\"\n  }'"
          },
          {
            "lang": "javascript",
            "label": "JavaScript (fetch)",
            "source": "fetch(\"https://api.joinformal.com/core.v1.ConnectorService/UpdateConnector\", {\n  method: \"POST\",\n  headers: {\n    \"Authorization\": \"Bearer YOUR_API_KEY\",\n    \"Content-Type\": \"application/json\"\n  },\n  body: JSON.stringify({\n    example: \"value\"\n  })\n})\n  .then(response => response.json())\n  .then(data => console.log(data))\n  .catch(error => console.error(error));"
          },
          {
            "lang": "python",
            "label": "Python",
            "source": "import requests\n\nurl = \"https://api.joinformal.com/core.v1.ConnectorService/UpdateConnector\"\nheaders = {\n    \"Authorization\": \"Bearer YOUR_API_KEY\",\n    \"Content-Type\": \"application/json\"\n}\ndata = {\n    \"example\": \"value\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())"
          },
          {
            "lang": "go",
            "label": "Go",
            "source": "package main\n\nimport (\n    \"bytes\"\n    \"encoding/json\"\n    \"fmt\"\n    \"io\"\n    \"net/http\"\n)\n\nfunc main() {\n    url := \"https://api.joinformal.com/core.v1.ConnectorService/UpdateConnector\"\n\n    body := map[string]string{\n        \"example\": \"value\",\n    }\n\n    jsonData, _ := json.Marshal(body)\n\n    req, _ := http.NewRequest(\"POST\", url, bytes.NewBuffer(jsonData))\n    req.Header.Set(\"Authorization\", \"Bearer YOUR_API_KEY\")\n    req.Header.Set(\"Content-Type\", \"application/json\")\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        panic(err)\n    }\n    defer resp.Body.Close()\n\n    responseBody, _ := io.ReadAll(resp.Body)\n    fmt.Println(string(responseBody))\n}"
          }
        ]
      }
    },
    "/core.v1.ConnectorService/UpdateConnectorConfiguration": {
      "post": {
        "tags": [
          "core.v1.ConnectorService"
        ],
        "summary": "UpdateConnectorConfiguration",
        "operationId": "core.v1.ConnectorService.UpdateConnectorConfiguration",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/core.v1.UpdateConnectorConfigurationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/core.v1.UpdateConnectorConfigurationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid request parameters or body",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "invalid_request"
                    },
                    "message": {
                      "type": "string",
                      "example": "Invalid request parameters"
                    },
                    "details": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "unauthorized"
                    },
                    "message": {
                      "type": "string",
                      "example": "Authentication required"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "forbidden"
                    },
                    "message": {
                      "type": "string",
                      "example": "Insufficient permissions to perform this action"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "not_found"
                    },
                    "message": {
                      "type": "string",
                      "example": "Resource not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - An error occurred processing the request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "internal_error"
                    },
                    "message": {
                      "type": "string",
                      "example": "An internal error occurred"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "curl",
            "label": "cURL",
            "source": "curl -X POST \"https://api.joinformal.com/core.v1.ConnectorService/UpdateConnectorConfiguration\" \\\n  -H \"Authorization: Bearer YOUR_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"example\": \"value\"\n  }'"
          },
          {
            "lang": "javascript",
            "label": "JavaScript (fetch)",
            "source": "fetch(\"https://api.joinformal.com/core.v1.ConnectorService/UpdateConnectorConfiguration\", {\n  method: \"POST\",\n  headers: {\n    \"Authorization\": \"Bearer YOUR_API_KEY\",\n    \"Content-Type\": \"application/json\"\n  },\n  body: JSON.stringify({\n    example: \"value\"\n  })\n})\n  .then(response => response.json())\n  .then(data => console.log(data))\n  .catch(error => console.error(error));"
          },
          {
            "lang": "python",
            "label": "Python",
            "source": "import requests\n\nurl = \"https://api.joinformal.com/core.v1.ConnectorService/UpdateConnectorConfiguration\"\nheaders = {\n    \"Authorization\": \"Bearer YOUR_API_KEY\",\n    \"Content-Type\": \"application/json\"\n}\ndata = {\n    \"example\": \"value\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())"
          },
          {
            "lang": "go",
            "label": "Go",
            "source": "package main\n\nimport (\n    \"bytes\"\n    \"encoding/json\"\n    \"fmt\"\n    \"io\"\n    \"net/http\"\n)\n\nfunc main() {\n    url := \"https://api.joinformal.com/core.v1.ConnectorService/UpdateConnectorConfiguration\"\n\n    body := map[string]string{\n        \"example\": \"value\",\n    }\n\n    jsonData, _ := json.Marshal(body)\n\n    req, _ := http.NewRequest(\"POST\", url, bytes.NewBuffer(jsonData))\n    req.Header.Set(\"Authorization\", \"Bearer YOUR_API_KEY\")\n    req.Header.Set(\"Content-Type\", \"application/json\")\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        panic(err)\n    }\n    defer resp.Body.Close()\n\n    responseBody, _ := io.ReadAll(resp.Body)\n    fmt.Println(string(responseBody))\n}"
          }
        ]
      }
    },
    "/core.v1.ConnectorService/UpdateConnectorHostname": {
      "post": {
        "tags": [
          "core.v1.ConnectorService"
        ],
        "summary": "UpdateConnectorHostname",
        "operationId": "core.v1.ConnectorService.UpdateConnectorHostname",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/core.v1.UpdateConnectorHostnameRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/core.v1.UpdateConnectorHostnameResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid request parameters or body",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "invalid_request"
                    },
                    "message": {
                      "type": "string",
                      "example": "Invalid request parameters"
                    },
                    "details": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "unauthorized"
                    },
                    "message": {
                      "type": "string",
                      "example": "Authentication required"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "forbidden"
                    },
                    "message": {
                      "type": "string",
                      "example": "Insufficient permissions to perform this action"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "not_found"
                    },
                    "message": {
                      "type": "string",
                      "example": "Resource not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - An error occurred processing the request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "internal_error"
                    },
                    "message": {
                      "type": "string",
                      "example": "An internal error occurred"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "curl",
            "label": "cURL",
            "source": "curl -X POST \"https://api.joinformal.com/core.v1.ConnectorService/UpdateConnectorHostname\" \\\n  -H \"Authorization: Bearer YOUR_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"example\": \"value\"\n  }'"
          },
          {
            "lang": "javascript",
            "label": "JavaScript (fetch)",
            "source": "fetch(\"https://api.joinformal.com/core.v1.ConnectorService/UpdateConnectorHostname\", {\n  method: \"POST\",\n  headers: {\n    \"Authorization\": \"Bearer YOUR_API_KEY\",\n    \"Content-Type\": \"application/json\"\n  },\n  body: JSON.stringify({\n    example: \"value\"\n  })\n})\n  .then(response => response.json())\n  .then(data => console.log(data))\n  .catch(error => console.error(error));"
          },
          {
            "lang": "python",
            "label": "Python",
            "source": "import requests\n\nurl = \"https://api.joinformal.com/core.v1.ConnectorService/UpdateConnectorHostname\"\nheaders = {\n    \"Authorization\": \"Bearer YOUR_API_KEY\",\n    \"Content-Type\": \"application/json\"\n}\ndata = {\n    \"example\": \"value\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())"
          },
          {
            "lang": "go",
            "label": "Go",
            "source": "package main\n\nimport (\n    \"bytes\"\n    \"encoding/json\"\n    \"fmt\"\n    \"io\"\n    \"net/http\"\n)\n\nfunc main() {\n    url := \"https://api.joinformal.com/core.v1.ConnectorService/UpdateConnectorHostname\"\n\n    body := map[string]string{\n        \"example\": \"value\",\n    }\n\n    jsonData, _ := json.Marshal(body)\n\n    req, _ := http.NewRequest(\"POST\", url, bytes.NewBuffer(jsonData))\n    req.Header.Set(\"Authorization\", \"Bearer YOUR_API_KEY\")\n    req.Header.Set(\"Content-Type\", \"application/json\")\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        panic(err)\n    }\n    defer resp.Body.Close()\n\n    responseBody, _ := io.ReadAll(resp.Body)\n    fmt.Println(string(responseBody))\n}"
          }
        ]
      }
    },
    "/core.v1.ConnectorService/UpdateConnectorListener": {
      "post": {
        "tags": [
          "core.v1.ConnectorService"
        ],
        "summary": "UpdateConnectorListener",
        "operationId": "core.v1.ConnectorService.UpdateConnectorListener",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/core.v1.UpdateConnectorListenerRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/core.v1.UpdateConnectorListenerResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid request parameters or body",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "invalid_request"
                    },
                    "message": {
                      "type": "string",
                      "example": "Invalid request parameters"
                    },
                    "details": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "unauthorized"
                    },
                    "message": {
                      "type": "string",
                      "example": "Authentication required"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "forbidden"
                    },
                    "message": {
                      "type": "string",
                      "example": "Insufficient permissions to perform this action"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "not_found"
                    },
                    "message": {
                      "type": "string",
                      "example": "Resource not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - An error occurred processing the request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "internal_error"
                    },
                    "message": {
                      "type": "string",
                      "example": "An internal error occurred"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "curl",
            "label": "cURL",
            "source": "curl -X POST \"https://api.joinformal.com/core.v1.ConnectorService/UpdateConnectorListener\" \\\n  -H \"Authorization: Bearer YOUR_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"example\": \"value\"\n  }'"
          },
          {
            "lang": "javascript",
            "label": "JavaScript (fetch)",
            "source": "fetch(\"https://api.joinformal.com/core.v1.ConnectorService/UpdateConnectorListener\", {\n  method: \"POST\",\n  headers: {\n    \"Authorization\": \"Bearer YOUR_API_KEY\",\n    \"Content-Type\": \"application/json\"\n  },\n  body: JSON.stringify({\n    example: \"value\"\n  })\n})\n  .then(response => response.json())\n  .then(data => console.log(data))\n  .catch(error => console.error(error));"
          },
          {
            "lang": "python",
            "label": "Python",
            "source": "import requests\n\nurl = \"https://api.joinformal.com/core.v1.ConnectorService/UpdateConnectorListener\"\nheaders = {\n    \"Authorization\": \"Bearer YOUR_API_KEY\",\n    \"Content-Type\": \"application/json\"\n}\ndata = {\n    \"example\": \"value\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())"
          },
          {
            "lang": "go",
            "label": "Go",
            "source": "package main\n\nimport (\n    \"bytes\"\n    \"encoding/json\"\n    \"fmt\"\n    \"io\"\n    \"net/http\"\n)\n\nfunc main() {\n    url := \"https://api.joinformal.com/core.v1.ConnectorService/UpdateConnectorListener\"\n\n    body := map[string]string{\n        \"example\": \"value\",\n    }\n\n    jsonData, _ := json.Marshal(body)\n\n    req, _ := http.NewRequest(\"POST\", url, bytes.NewBuffer(jsonData))\n    req.Header.Set(\"Authorization\", \"Bearer YOUR_API_KEY\")\n    req.Header.Set(\"Content-Type\", \"application/json\")\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        panic(err)\n    }\n    defer resp.Body.Close()\n\n    responseBody, _ := io.ReadAll(resp.Body)\n    fmt.Println(string(responseBody))\n}"
          }
        ]
      }
    },
    "/core.v1.ConnectorService/UpdateConnectorListenerLink": {
      "post": {
        "tags": [
          "core.v1.ConnectorService"
        ],
        "summary": "UpdateConnectorListenerLink",
        "operationId": "core.v1.ConnectorService.UpdateConnectorListenerLink",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/core.v1.UpdateConnectorListenerLinkRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/core.v1.UpdateConnectorListenerLinkResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid request parameters or body",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "invalid_request"
                    },
                    "message": {
                      "type": "string",
                      "example": "Invalid request parameters"
                    },
                    "details": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "unauthorized"
                    },
                    "message": {
                      "type": "string",
                      "example": "Authentication required"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "forbidden"
                    },
                    "message": {
                      "type": "string",
                      "example": "Insufficient permissions to perform this action"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "not_found"
                    },
                    "message": {
                      "type": "string",
                      "example": "Resource not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - An error occurred processing the request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "internal_error"
                    },
                    "message": {
                      "type": "string",
                      "example": "An internal error occurred"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "curl",
            "label": "cURL",
            "source": "curl -X POST \"https://api.joinformal.com/core.v1.ConnectorService/UpdateConnectorListenerLink\" \\\n  -H \"Authorization: Bearer YOUR_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"example\": \"value\"\n  }'"
          },
          {
            "lang": "javascript",
            "label": "JavaScript (fetch)",
            "source": "fetch(\"https://api.joinformal.com/core.v1.ConnectorService/UpdateConnectorListenerLink\", {\n  method: \"POST\",\n  headers: {\n    \"Authorization\": \"Bearer YOUR_API_KEY\",\n    \"Content-Type\": \"application/json\"\n  },\n  body: JSON.stringify({\n    example: \"value\"\n  })\n})\n  .then(response => response.json())\n  .then(data => console.log(data))\n  .catch(error => console.error(error));"
          },
          {
            "lang": "python",
            "label": "Python",
            "source": "import requests\n\nurl = \"https://api.joinformal.com/core.v1.ConnectorService/UpdateConnectorListenerLink\"\nheaders = {\n    \"Authorization\": \"Bearer YOUR_API_KEY\",\n    \"Content-Type\": \"application/json\"\n}\ndata = {\n    \"example\": \"value\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())"
          },
          {
            "lang": "go",
            "label": "Go",
            "source": "package main\n\nimport (\n    \"bytes\"\n    \"encoding/json\"\n    \"fmt\"\n    \"io\"\n    \"net/http\"\n)\n\nfunc main() {\n    url := \"https://api.joinformal.com/core.v1.ConnectorService/UpdateConnectorListenerLink\"\n\n    body := map[string]string{\n        \"example\": \"value\",\n    }\n\n    jsonData, _ := json.Marshal(body)\n\n    req, _ := http.NewRequest(\"POST\", url, bytes.NewBuffer(jsonData))\n    req.Header.Set(\"Authorization\", \"Bearer YOUR_API_KEY\")\n    req.Header.Set(\"Content-Type\", \"application/json\")\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        panic(err)\n    }\n    defer resp.Body.Close()\n\n    responseBody, _ := io.ReadAll(resp.Body)\n    fmt.Println(string(responseBody))\n}"
          }
        ]
      }
    },
    "/core.v1.ConnectorService/UpdateConnectorListenerRule": {
      "post": {
        "tags": [
          "core.v1.ConnectorService"
        ],
        "summary": "UpdateConnectorListenerRule",
        "operationId": "core.v1.ConnectorService.UpdateConnectorListenerRule",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/core.v1.UpdateConnectorListenerRuleRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/core.v1.UpdateConnectorListenerRuleResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid request parameters or body",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "invalid_request"
                    },
                    "message": {
                      "type": "string",
                      "example": "Invalid request parameters"
                    },
                    "details": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "unauthorized"
                    },
                    "message": {
                      "type": "string",
                      "example": "Authentication required"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "forbidden"
                    },
                    "message": {
                      "type": "string",
                      "example": "Insufficient permissions to perform this action"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "not_found"
                    },
                    "message": {
                      "type": "string",
                      "example": "Resource not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - An error occurred processing the request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "internal_error"
                    },
                    "message": {
                      "type": "string",
                      "example": "An internal error occurred"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "curl",
            "label": "cURL",
            "source": "curl -X POST \"https://api.joinformal.com/core.v1.ConnectorService/UpdateConnectorListenerRule\" \\\n  -H \"Authorization: Bearer YOUR_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"example\": \"value\"\n  }'"
          },
          {
            "lang": "javascript",
            "label": "JavaScript (fetch)",
            "source": "fetch(\"https://api.joinformal.com/core.v1.ConnectorService/UpdateConnectorListenerRule\", {\n  method: \"POST\",\n  headers: {\n    \"Authorization\": \"Bearer YOUR_API_KEY\",\n    \"Content-Type\": \"application/json\"\n  },\n  body: JSON.stringify({\n    example: \"value\"\n  })\n})\n  .then(response => response.json())\n  .then(data => console.log(data))\n  .catch(error => console.error(error));"
          },
          {
            "lang": "python",
            "label": "Python",
            "source": "import requests\n\nurl = \"https://api.joinformal.com/core.v1.ConnectorService/UpdateConnectorListenerRule\"\nheaders = {\n    \"Authorization\": \"Bearer YOUR_API_KEY\",\n    \"Content-Type\": \"application/json\"\n}\ndata = {\n    \"example\": \"value\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())"
          },
          {
            "lang": "go",
            "label": "Go",
            "source": "package main\n\nimport (\n    \"bytes\"\n    \"encoding/json\"\n    \"fmt\"\n    \"io\"\n    \"net/http\"\n)\n\nfunc main() {\n    url := \"https://api.joinformal.com/core.v1.ConnectorService/UpdateConnectorListenerRule\"\n\n    body := map[string]string{\n        \"example\": \"value\",\n    }\n\n    jsonData, _ := json.Marshal(body)\n\n    req, _ := http.NewRequest(\"POST\", url, bytes.NewBuffer(jsonData))\n    req.Header.Set(\"Authorization\", \"Bearer YOUR_API_KEY\")\n    req.Header.Set(\"Content-Type\", \"application/json\")\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        panic(err)\n    }\n    defer resp.Body.Close()\n\n    responseBody, _ := io.ReadAll(resp.Body)\n    fmt.Println(string(responseBody))\n}"
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "core.v1.Connector": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "title": "id",
            "minLength": 1
          },
          "name": {
            "type": "string",
            "title": "name",
            "minLength": 1
          },
          "terminationProtection": {
            "type": "boolean",
            "title": "termination_protection"
          },
          "spaceId": {
            "type": "string",
            "title": "space_id"
          },
          "space": {
            "title": "space",
            "$ref": "#/components/schemas/core.v1.Space"
          },
          "createdAt": {
            "title": "created_at",
            "description": "timestamp.lt_now = true\n",
            "$ref": "#/components/schemas/google.protobuf.Timestamp"
          },
          "updatedAt": {
            "title": "updated_at",
            "description": "timestamp.lt_now = true\n",
            "$ref": "#/components/schemas/google.protobuf.Timestamp"
          }
        },
        "title": "Connector",
        "additionalProperties": false
      },
      "core.v1.ConnectorConfiguration": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "title": "id",
            "minLength": 1
          },
          "connectorId": {
            "type": "string",
            "title": "connector_id",
            "minLength": 1
          },
          "logLevel": {
            "type": "string",
            "title": "log_level"
          },
          "createdAt": {
            "title": "created_at",
            "description": "timestamp.lt_now = true\n",
            "$ref": "#/components/schemas/google.protobuf.Timestamp"
          },
          "updatedAt": {
            "title": "updated_at",
            "description": "timestamp.lt_now = true\n",
            "$ref": "#/components/schemas/google.protobuf.Timestamp"
          }
        },
        "title": "ConnectorConfiguration",
        "additionalProperties": false
      },
      "core.v1.ConnectorHostname": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "title": "id",
            "minLength": 1
          },
          "hostname": {
            "type": "string",
            "title": "hostname",
            "minLength": 1
          },
          "managedTls": {
            "type": "boolean",
            "title": "managed_tls"
          },
          "connector": {
            "title": "connector",
            "$ref": "#/components/schemas/core.v1.Connector"
          },
          "terminationProtection": {
            "type": "boolean",
            "title": "termination_protection"
          },
          "createdAt": {
            "title": "created_at",
            "description": "timestamp.lt_now = true\n",
            "$ref": "#/components/schemas/google.protobuf.Timestamp"
          },
          "updatedAt": {
            "title": "updated_at",
            "description": "timestamp.lt_now = true\n",
            "$ref": "#/components/schemas/google.protobuf.Timestamp"
          },
          "tlsCertificateStatus": {
            "type": "string",
            "title": "tls_certificate_status",
            "enum": [
              "none",
              "issuing",
              "issued"
            ]
          },
          "dnsRecord": {
            "type": "string",
            "title": "dns_record"
          },
          "dnsRecordStatus": {
            "type": "string",
            "title": "dns_record_status",
            "enum": [
              "none",
              "pending",
              "success",
              "failed"
            ]
          }
        },
        "title": "ConnectorHostname",
        "additionalProperties": false
      },
      "core.v1.ConnectorListener": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "title": "id",
            "minLength": 1
          },
          "name": {
            "type": "string",
            "title": "name",
            "minLength": 1
          },
          "port": {
            "exclusiveMinimum": 0,
            "type": "integer",
            "title": "port",
            "maximum": 65535,
            "format": "int32"
          },
          "terminationProtection": {
            "type": "boolean",
            "title": "termination_protection"
          },
          "createdAt": {
            "title": "created_at",
            "description": "timestamp.lt_now = true\n",
            "$ref": "#/components/schemas/google.protobuf.Timestamp"
          },
          "updatedAt": {
            "title": "updated_at",
            "description": "timestamp.lt_now = true\n",
            "$ref": "#/components/schemas/google.protobuf.Timestamp"
          }
        },
        "title": "ConnectorListener",
        "additionalProperties": false
      },
      "core.v1.ConnectorListenerLink": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "title": "id",
            "minLength": 1
          },
          "listener": {
            "title": "listener",
            "$ref": "#/components/schemas/core.v1.ConnectorListener"
          },
          "connector": {
            "title": "connector",
            "$ref": "#/components/schemas/core.v1.Connector"
          },
          "terminationProtection": {
            "type": "boolean",
            "title": "termination_protection"
          },
          "createdAt": {
            "title": "created_at",
            "description": "timestamp.lt_now = true\n",
            "$ref": "#/components/schemas/google.protobuf.Timestamp"
          },
          "updatedAt": {
            "title": "updated_at",
            "description": "timestamp.lt_now = true\n",
            "$ref": "#/components/schemas/google.protobuf.Timestamp"
          }
        },
        "title": "ConnectorListenerLink",
        "additionalProperties": false
      },
      "core.v1.ConnectorListenerRule": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "title": "id",
            "minLength": 1
          },
          "listener": {
            "title": "listener",
            "$ref": "#/components/schemas/core.v1.ConnectorListener"
          },
          "type": {
            "type": "string",
            "title": "type",
            "enum": [
              "technology",
              "any",
              "resource"
            ]
          },
          "rule": {
            "type": "string",
            "title": "rule",
            "minLength": 1
          },
          "terminationProtection": {
            "type": "boolean",
            "title": "termination_protection"
          },
          "createdAt": {
            "title": "created_at",
            "description": "timestamp.lt_now = true\n",
            "$ref": "#/components/schemas/google.protobuf.Timestamp"
          },
          "updatedAt": {
            "title": "updated_at",
            "description": "timestamp.lt_now = true\n",
            "$ref": "#/components/schemas/google.protobuf.Timestamp"
          }
        },
        "title": "ConnectorListenerRule",
        "additionalProperties": false
      },
      "core.v1.ConnectorSatelliteLink": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "title": "id",
            "minLength": 1
          },
          "connectorId": {
            "type": "string",
            "title": "connector_id",
            "minLength": 1
          },
          "satelliteId": {
            "type": "string",
            "title": "satellite_id",
            "minLength": 1
          },
          "satelliteType": {
            "type": "string",
            "title": "satellite_type",
            "enum": [
              "data_classifier",
              "policy_data_loader"
            ]
          },
          "createdAt": {
            "title": "created_at",
            "description": "timestamp.lt_now = true\n",
            "$ref": "#/components/schemas/google.protobuf.Timestamp"
          },
          "updatedAt": {
            "title": "updated_at",
            "description": "timestamp.lt_now = true\n",
            "$ref": "#/components/schemas/google.protobuf.Timestamp"
          }
        },
        "title": "ConnectorSatelliteLink",
        "additionalProperties": false,
        "description": "Connector Satellite Links"
      },
      "core.v1.CreateConnectorCloudformationTemplateRequest": {
        "type": "object",
        "properties": {
          "connectorId": {
            "type": "string",
            "title": "connector_id",
            "minLength": 1
          }
        },
        "title": "CreateConnectorCloudformationTemplateRequest",
        "additionalProperties": false
      },
      "core.v1.CreateConnectorCloudformationTemplateResponse": {
        "type": "object",
        "properties": {
          "templateUrl": {
            "type": "string",
            "title": "template_url"
          }
        },
        "title": "CreateConnectorCloudformationTemplateResponse",
        "additionalProperties": false
      },
      "core.v1.CreateConnectorConfigurationRequest": {
        "type": "object",
        "properties": {
          "connectorId": {
            "type": "string",
            "title": "connector_id",
            "minLength": 1
          },
          "logLevel": {
            "type": "string",
            "title": "log_level",
            "enum": [
              "debug",
              "info",
              "warn",
              "error",
              "fatal",
              "panic"
            ]
          }
        },
        "title": "CreateConnectorConfigurationRequest",
        "additionalProperties": false
      },
      "core.v1.CreateConnectorConfigurationResponse": {
        "type": "object",
        "properties": {
          "connectorConfiguration": {
            "title": "connector_configuration",
            "$ref": "#/components/schemas/core.v1.ConnectorConfiguration"
          }
        },
        "title": "CreateConnectorConfigurationResponse",
        "additionalProperties": false
      },
      "core.v1.CreateConnectorHelmValuesRequest": {
        "type": "object",
        "properties": {
          "connectorId": {
            "type": "string",
            "title": "connector_id",
            "minLength": 1
          },
          "cloudProvider": {
            "type": "string",
            "title": "cloud_provider",
            "enum": [
              "aws"
            ]
          }
        },
        "title": "CreateConnectorHelmValuesRequest",
        "additionalProperties": false
      },
      "core.v1.CreateConnectorHelmValuesResponse": {
        "type": "object",
        "properties": {
          "valuesUrl": {
            "type": "string",
            "title": "values_url"
          }
        },
        "title": "CreateConnectorHelmValuesResponse",
        "additionalProperties": false
      },
      "core.v1.CreateConnectorHostnameRequest": {
        "type": "object",
        "properties": {
          "hostname": {
            "type": "string",
            "title": "hostname",
            "minLength": 1
          },
          "connectorId": {
            "type": "string",
            "title": "connector_id",
            "minLength": 1
          },
          "managedTls": {
            "type": "boolean",
            "title": "managed_tls"
          },
          "terminationProtection": {
            "type": "boolean",
            "title": "termination_protection"
          },
          "dnsRecord": {
            "type": "string",
            "title": "dns_record"
          },
          "certificate": {
            "type": "string",
            "title": "certificate",
            "format": "byte",
            "nullable": true
          },
          "privateKey": {
            "type": "string",
            "title": "private_key",
            "format": "byte",
            "nullable": true
          }
        },
        "title": "CreateConnectorHostnameRequest",
        "additionalProperties": false
      },
      "core.v1.CreateConnectorHostnameResponse": {
        "type": "object",
        "properties": {
          "connectorHostname": {
            "title": "connector_hostname",
            "$ref": "#/components/schemas/core.v1.ConnectorHostname"
          }
        },
        "title": "CreateConnectorHostnameResponse",
        "additionalProperties": false
      },
      "core.v1.CreateConnectorInstanceShutdownRequestRequest": {
        "type": "object",
        "properties": {
          "instanceId": {
            "type": "string",
            "title": "instance_id",
            "minLength": 1
          },
          "connectorId": {
            "type": "string",
            "title": "connector_id",
            "minLength": 1
          }
        },
        "title": "CreateConnectorInstanceShutdownRequestRequest",
        "additionalProperties": false
      },
      "core.v1.CreateConnectorInstanceShutdownRequestResponse": {
        "type": "object",
        "properties": {
          "instanceRemoteShutdown": {
            "title": "instance_remote_shutdown",
            "$ref": "#/components/schemas/core.v1.InstanceRemoteShutdown"
          }
        },
        "title": "CreateConnectorInstanceShutdownRequestResponse",
        "additionalProperties": false
      },
      "core.v1.CreateConnectorListenerLinkRequest": {
        "type": "object",
        "properties": {
          "connectorId": {
            "type": "string",
            "title": "connector_id",
            "minLength": 1
          },
          "connectorListenerId": {
            "type": "string",
            "title": "connector_listener_id",
            "minLength": 1
          },
          "terminationProtection": {
            "type": "boolean",
            "title": "termination_protection"
          }
        },
        "title": "CreateConnectorListenerLinkRequest",
        "additionalProperties": false
      },
      "core.v1.CreateConnectorListenerLinkResponse": {
        "type": "object",
        "properties": {
          "connectorListenerLink": {
            "title": "connector_listener_link",
            "$ref": "#/components/schemas/core.v1.ConnectorListenerLink"
          }
        },
        "title": "CreateConnectorListenerLinkResponse",
        "additionalProperties": false
      },
      "core.v1.CreateConnectorListenerRequest": {
        "type": "object",
        "properties": {
          "port": {
            "exclusiveMinimum": 0,
            "type": "integer",
            "title": "port",
            "maximum": 65535,
            "format": "int32"
          },
          "name": {
            "type": "string",
            "title": "name",
            "minLength": 1
          },
          "terminationProtection": {
            "type": "boolean",
            "title": "termination_protection"
          }
        },
        "title": "CreateConnectorListenerRequest",
        "additionalProperties": false
      },
      "core.v1.CreateConnectorListenerResponse": {
        "type": "object",
        "properties": {
          "connectorListener": {
            "title": "connector_listener",
            "$ref": "#/components/schemas/core.v1.ConnectorListener"
          }
        },
        "title": "CreateConnectorListenerResponse",
        "additionalProperties": false
      },
      "core.v1.CreateConnectorListenerRuleRequest": {
        "type": "object",
        "properties": {
          "connectorListenerId": {
            "type": "string",
            "title": "connector_listener_id",
            "minLength": 1
          },
          "type": {
            "type": "string",
            "title": "type",
            "enum": [
              "technology",
              "any",
              "resource"
            ]
          },
          "rule": {
            "type": "string",
            "title": "rule",
            "pattern": "^(any|resource_.*|datastore_.*|athena|bigquery|clickhouse|dynamodb|elastic|http|kafka|kubernetes|mariadb|mongodb|mssqlserver|mysql|postgres|redis|s3|salesforce|snowflake|ssh|ssm_discovery)$"
          },
          "terminationProtection": {
            "type": "boolean",
            "title": "termination_protection"
          }
        },
        "title": "CreateConnectorListenerRuleRequest",
        "additionalProperties": false
      },
      "core.v1.CreateConnectorListenerRuleResponse": {
        "type": "object",
        "properties": {
          "connectorListenerRule": {
            "title": "connector_listener_rule",
            "$ref": "#/components/schemas/core.v1.ConnectorListenerRule"
          }
        },
        "title": "CreateConnectorListenerRuleResponse",
        "additionalProperties": false
      },
      "core.v1.CreateConnectorRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "title": "name",
            "maxLength": 63,
            "minLength": 3,
            "pattern": "^[0-9a-z\\-]+$"
          },
          "terminationProtection": {
            "type": "boolean",
            "title": "termination_protection"
          },
          "spaceId": {
            "type": "string",
            "title": "space_id",
            "nullable": true
          }
        },
        "title": "CreateConnectorRequest",
        "additionalProperties": false
      },
      "core.v1.CreateConnectorResponse": {
        "type": "object",
        "properties": {
          "connector": {
            "title": "connector",
            "$ref": "#/components/schemas/core.v1.Connector"
          }
        },
        "title": "CreateConnectorResponse",
        "additionalProperties": false
      },
      "core.v1.CreateConnectorSatelliteLinkRequest": {
        "type": "object",
        "properties": {
          "connectorId": {
            "type": "string",
            "title": "connector_id",
            "minLength": 1
          },
          "satelliteId": {
            "type": "string",
            "title": "satellite_id",
            "minLength": 1
          },
          "satelliteType": {
            "type": "string",
            "title": "satellite_type",
            "enum": [
              "data_classifier",
              "policy_data_loader"
            ]
          }
        },
        "title": "CreateConnectorSatelliteLinkRequest",
        "additionalProperties": false
      },
      "core.v1.CreateConnectorSatelliteLinkResponse": {
        "type": "object",
        "properties": {
          "connectorSatelliteLink": {
            "title": "connector_satellite_link",
            "$ref": "#/components/schemas/core.v1.ConnectorSatelliteLink"
          }
        },
        "title": "CreateConnectorSatelliteLinkResponse",
        "additionalProperties": false
      },
      "core.v1.DeleteConnectorConfigurationRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "title": "id",
            "minLength": 1
          }
        },
        "title": "DeleteConnectorConfigurationRequest",
        "additionalProperties": false
      },
      "core.v1.DeleteConnectorConfigurationResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "title": "id",
            "minLength": 1
          }
        },
        "title": "DeleteConnectorConfigurationResponse",
        "additionalProperties": false
      },
      "core.v1.DeleteConnectorHostnameRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "title": "id",
            "minLength": 1
          }
        },
        "title": "DeleteConnectorHostnameRequest",
        "additionalProperties": false
      },
      "core.v1.DeleteConnectorHostnameResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "title": "id",
            "minLength": 1
          }
        },
        "title": "DeleteConnectorHostnameResponse",
        "additionalProperties": false
      },
      "core.v1.DeleteConnectorListenerLinkRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "title": "id",
            "minLength": 1
          }
        },
        "title": "DeleteConnectorListenerLinkRequest",
        "additionalProperties": false
      },
      "core.v1.DeleteConnectorListenerLinkResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "title": "id",
            "minLength": 1
          }
        },
        "title": "DeleteConnectorListenerLinkResponse",
        "additionalProperties": false
      },
      "core.v1.DeleteConnectorListenerRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "title": "id",
            "minLength": 1
          }
        },
        "title": "DeleteConnectorListenerRequest",
        "additionalProperties": false
      },
      "core.v1.DeleteConnectorListenerResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "title": "id",
            "minLength": 1
          }
        },
        "title": "DeleteConnectorListenerResponse",
        "additionalProperties": false
      },
      "core.v1.DeleteConnectorListenerRuleRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "title": "id",
            "minLength": 1
          }
        },
        "title": "DeleteConnectorListenerRuleRequest",
        "additionalProperties": false
      },
      "core.v1.DeleteConnectorListenerRuleResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "title": "id",
            "minLength": 1
          }
        },
        "title": "DeleteConnectorListenerRuleResponse",
        "additionalProperties": false
      },
      "core.v1.DeleteConnectorRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "title": "id",
            "minLength": 1
          }
        },
        "title": "DeleteConnectorRequest",
        "additionalProperties": false
      },
      "core.v1.DeleteConnectorResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "title": "id",
            "minLength": 1
          }
        },
        "title": "DeleteConnectorResponse",
        "additionalProperties": false
      },
      "core.v1.DeleteConnectorSatelliteLinkRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "title": "id",
            "minLength": 1
          }
        },
        "title": "DeleteConnectorSatelliteLinkRequest",
        "additionalProperties": false
      },
      "core.v1.DeleteConnectorSatelliteLinkResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "title": "id",
            "minLength": 1
          }
        },
        "title": "DeleteConnectorSatelliteLinkResponse",
        "additionalProperties": false
      },
      "core.v1.Field": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "title": "key",
            "minLength": 1
          },
          "operator": {
            "type": "string",
            "title": "operator",
            "enum": [
              "equals",
              "not_equals",
              "contains",
              "not_contains",
              "empty",
              "not_empty",
              "starts_with",
              "ends_with",
              "lower_than",
              "greater_than"
            ]
          },
          "value": {
            "title": "value",
            "nullable": true,
            "$ref": "#/components/schemas/google.protobuf.Any"
          }
        },
        "title": "Field",
        "additionalProperties": false
      },
      "core.v1.FieldGroup": {
        "type": "object",
        "properties": {
          "operator": {
            "type": "string",
            "title": "operator",
            "enum": [
              "and",
              "or"
            ]
          },
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/core.v1.Filter"
            },
            "title": "filters",
            "minItems": 1
          }
        },
        "title": "FieldGroup",
        "additionalProperties": false
      },
      "core.v1.Filter": {
        "type": "object",
        "properties": {
          "field": {
            "title": "field",
            "nullable": true,
            "$ref": "#/components/schemas/core.v1.Field"
          },
          "group": {
            "title": "group",
            "nullable": true,
            "$ref": "#/components/schemas/core.v1.FieldGroup"
          }
        },
        "title": "Filter",
        "additionalProperties": false
      },
      "core.v1.GetConnectorApiKeyRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "title": "id",
            "minLength": 1
          }
        },
        "title": "GetConnectorApiKeyRequest",
        "additionalProperties": false
      },
      "core.v1.GetConnectorApiKeyResponse": {
        "type": "object",
        "properties": {
          "secret": {
            "type": "string",
            "title": "secret",
            "minLength": 1
          }
        },
        "title": "GetConnectorApiKeyResponse",
        "additionalProperties": false
      },
      "core.v1.GetConnectorConfigurationByConnectorIdRequest": {
        "type": "object",
        "properties": {
          "connectorId": {
            "type": "string",
            "title": "connector_id",
            "minLength": 1
          }
        },
        "title": "GetConnectorConfigurationByConnectorIdRequest",
        "additionalProperties": false
      },
      "core.v1.GetConnectorConfigurationByConnectorIdResponse": {
        "type": "object",
        "properties": {
          "connectorConfiguration": {
            "title": "connector_configuration",
            "$ref": "#/components/schemas/core.v1.ConnectorConfiguration"
          }
        },
        "title": "GetConnectorConfigurationByConnectorIdResponse",
        "additionalProperties": false
      },
      "core.v1.GetConnectorConfigurationRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "title": "id",
            "minLength": 1
          }
        },
        "title": "GetConnectorConfigurationRequest",
        "additionalProperties": false
      },
      "core.v1.GetConnectorConfigurationResponse": {
        "type": "object",
        "properties": {
          "connectorConfiguration": {
            "title": "connector_configuration",
            "$ref": "#/components/schemas/core.v1.ConnectorConfiguration"
          }
        },
        "title": "GetConnectorConfigurationResponse",
        "additionalProperties": false
      },
      "core.v1.GetConnectorHostnameRequest": {
        "type": "object",
        "oneOf": [
          {
            "properties": {
              "connectorId": {
                "type": "string",
                "title": "connector_id",
                "minLength": 1
              }
            },
            "title": "connector_id",
            "required": [
              "connectorId"
            ]
          },
          {
            "properties": {
              "hostnameId": {
                "type": "string",
                "title": "hostname_id",
                "minLength": 1
              }
            },
            "title": "hostname_id",
            "required": [
              "hostnameId"
            ]
          }
        ],
        "title": "GetConnectorHostnameRequest",
        "additionalProperties": false
      },
      "core.v1.GetConnectorHostnameResponse": {
        "type": "object",
        "properties": {
          "connectorHostname": {
            "title": "connector_hostname",
            "$ref": "#/components/schemas/core.v1.ConnectorHostname"
          }
        },
        "title": "GetConnectorHostnameResponse",
        "additionalProperties": false
      },
      "core.v1.GetConnectorListenerLinkRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "title": "id",
            "minLength": 1
          }
        },
        "title": "GetConnectorListenerLinkRequest",
        "additionalProperties": false
      },
      "core.v1.GetConnectorListenerLinkResponse": {
        "type": "object",
        "properties": {
          "connectorListenerLink": {
            "title": "connector_listener_link",
            "$ref": "#/components/schemas/core.v1.ConnectorListenerLink"
          }
        },
        "title": "GetConnectorListenerLinkResponse",
        "additionalProperties": false
      },
      "core.v1.GetConnectorListenerRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "title": "id",
            "minLength": 1
          }
        },
        "title": "GetConnectorListenerRequest",
        "additionalProperties": false
      },
      "core.v1.GetConnectorListenerResponse": {
        "type": "object",
        "properties": {
          "connectorListener": {
            "title": "connector_listener",
            "$ref": "#/components/schemas/core.v1.ConnectorListener"
          }
        },
        "title": "GetConnectorListenerResponse",
        "additionalProperties": false
      },
      "core.v1.GetConnectorListenerRuleRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "title": "id",
            "minLength": 1
          }
        },
        "title": "GetConnectorListenerRuleRequest",
        "additionalProperties": false
      },
      "core.v1.GetConnectorListenerRuleResponse": {
        "type": "object",
        "properties": {
          "connectorListenerRule": {
            "title": "connector_listener_rule",
            "$ref": "#/components/schemas/core.v1.ConnectorListenerRule"
          }
        },
        "title": "GetConnectorListenerRuleResponse",
        "additionalProperties": false
      },
      "core.v1.GetConnectorRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "title": "id",
            "minLength": 1
          }
        },
        "title": "GetConnectorRequest",
        "additionalProperties": false
      },
      "core.v1.GetConnectorResponse": {
        "type": "object",
        "properties": {
          "Connector": {
            "title": "Connector",
            "$ref": "#/components/schemas/core.v1.Connector"
          }
        },
        "title": "GetConnectorResponse",
        "additionalProperties": false
      },
      "core.v1.GetConnectorSatelliteLinkRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "title": "id",
            "minLength": 1
          }
        },
        "title": "GetConnectorSatelliteLinkRequest",
        "additionalProperties": false
      },
      "core.v1.GetConnectorSatelliteLinkResponse": {
        "type": "object",
        "properties": {
          "connectorSatelliteLink": {
            "title": "connector_satellite_link",
            "$ref": "#/components/schemas/core.v1.ConnectorSatelliteLink"
          }
        },
        "title": "GetConnectorSatelliteLinkResponse",
        "additionalProperties": false
      },
      "core.v1.Instance": {
        "type": "object",
        "properties": {
          "instanceId": {
            "type": "string",
            "title": "instance_id"
          },
          "lastSeen": {
            "title": "last_seen",
            "$ref": "#/components/schemas/google.protobuf.Timestamp"
          },
          "startTime": {
            "title": "start_time",
            "$ref": "#/components/schemas/google.protobuf.Timestamp"
          },
          "version": {
            "type": "string",
            "title": "version"
          }
        },
        "title": "Instance",
        "additionalProperties": false
      },
      "core.v1.InstanceRemoteShutdown": {
        "type": "object",
        "properties": {
          "instanceId": {
            "type": "string",
            "title": "instance_id"
          },
          "connectorId": {
            "type": "string",
            "title": "connector_id"
          },
          "createdAt": {
            "title": "created_at",
            "description": "timestamp.lt_now = true\n",
            "$ref": "#/components/schemas/google.protobuf.Timestamp"
          }
        },
        "title": "InstanceRemoteShutdown",
        "additionalProperties": false
      },
      "core.v1.ListConnectorInstancesRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "title": "id",
            "minLength": 1
          },
          "limit": {
            "exclusiveMinimum": 0,
            "type": "integer",
            "title": "limit",
            "maximum": 500,
            "format": "int32"
          },
          "cursor": {
            "type": "string",
            "title": "cursor"
          },
          "order": {
            "type": "string",
            "title": "order"
          }
        },
        "title": "ListConnectorInstancesRequest",
        "additionalProperties": false
      },
      "core.v1.ListConnectorInstancesResponse": {
        "type": "object",
        "properties": {
          "instances": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/core.v1.Instance"
            },
            "title": "instances"
          },
          "listMetadata": {
            "title": "list_metadata",
            "$ref": "#/components/schemas/core.v1.ListMetadata"
          }
        },
        "title": "ListConnectorInstancesResponse",
        "additionalProperties": false
      },
      "core.v1.ListConnectorListenerLinksRequest": {
        "type": "object",
        "allOf": [
          {
            "properties": {
              "limit": {
                "exclusiveMinimum": 0,
                "type": "integer",
                "title": "limit",
                "maximum": 500,
                "format": "int32"
              },
              "cursor": {
                "type": "string",
                "title": "cursor"
              },
              "order": {
                "type": "string",
                "title": "order"
              }
            }
          },
          {
            "oneOf": [
              {
                "properties": {
                  "connectorId": {
                    "type": "string",
                    "title": "connector_id",
                    "minLength": 1
                  }
                },
                "title": "connector_id",
                "required": [
                  "connectorId"
                ]
              },
              {
                "properties": {
                  "listenerId": {
                    "type": "string",
                    "title": "listener_id",
                    "minLength": 1
                  }
                },
                "title": "listener_id",
                "required": [
                  "listenerId"
                ]
              }
            ]
          }
        ],
        "title": "ListConnectorListenerLinksRequest",
        "additionalProperties": false
      },
      "core.v1.ListConnectorListenerLinksResponse": {
        "type": "object",
        "properties": {
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/core.v1.ConnectorListenerLink"
            },
            "title": "links"
          },
          "listMetadata": {
            "title": "list_metadata",
            "$ref": "#/components/schemas/core.v1.ListMetadata"
          }
        },
        "title": "ListConnectorListenerLinksResponse",
        "additionalProperties": false
      },
      "core.v1.ListConnectorListenerRulesRequest": {
        "type": "object",
        "properties": {
          "limit": {
            "exclusiveMinimum": 0,
            "type": "integer",
            "title": "limit",
            "maximum": 500,
            "format": "int32"
          },
          "cursor": {
            "type": "string",
            "title": "cursor"
          },
          "order": {
            "type": "string",
            "title": "order"
          },
          "connectorListenerId": {
            "type": "string",
            "title": "connector_listener_id",
            "minLength": 1
          }
        },
        "title": "ListConnectorListenerRulesRequest",
        "additionalProperties": false
      },
      "core.v1.ListConnectorListenerRulesResponse": {
        "type": "object",
        "properties": {
          "rules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/core.v1.ConnectorListenerRule"
            },
            "title": "rules"
          },
          "listMetadata": {
            "title": "list_metadata",
            "$ref": "#/components/schemas/core.v1.ListMetadata"
          }
        },
        "title": "ListConnectorListenerRulesResponse",
        "additionalProperties": false
      },
      "core.v1.ListConnectorListenersRequest": {
        "type": "object",
        "properties": {
          "limit": {
            "exclusiveMinimum": 0,
            "type": "integer",
            "title": "limit",
            "maximum": 500,
            "format": "int32"
          },
          "cursor": {
            "type": "string",
            "title": "cursor"
          },
          "order": {
            "type": "string",
            "title": "order"
          },
          "search": {
            "type": "string",
            "title": "search"
          },
          "searchFields": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "id",
                "name"
              ]
            },
            "title": "search_fields"
          },
          "filter": {
            "title": "filter",
            "nullable": true,
            "$ref": "#/components/schemas/core.v1.Filter"
          }
        },
        "title": "ListConnectorListenersRequest",
        "additionalProperties": false
      },
      "core.v1.ListConnectorListenersResponse": {
        "type": "object",
        "properties": {
          "connectorListeners": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/core.v1.ConnectorListener"
            },
            "title": "connector_listeners"
          },
          "listMetadata": {
            "title": "list_metadata",
            "$ref": "#/components/schemas/core.v1.ListMetadata"
          }
        },
        "title": "ListConnectorListenersResponse",
        "additionalProperties": false
      },
      "core.v1.ListConnectorSatelliteLinksRequest": {
        "type": "object",
        "properties": {
          "limit": {
            "exclusiveMinimum": 0,
            "type": "integer",
            "title": "limit",
            "maximum": 500,
            "format": "int32"
          },
          "cursor": {
            "type": "string",
            "title": "cursor"
          },
          "connectorId": {
            "type": "string",
            "title": "connector_id",
            "nullable": true
          },
          "satelliteId": {
            "type": "string",
            "title": "satellite_id",
            "nullable": true
          }
        },
        "title": "ListConnectorSatelliteLinksRequest",
        "additionalProperties": false
      },
      "core.v1.ListConnectorSatelliteLinksResponse": {
        "type": "object",
        "properties": {
          "connectorSatelliteLinks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/core.v1.ConnectorSatelliteLink"
            },
            "title": "connector_satellite_links"
          },
          "listMetadata": {
            "title": "list_metadata",
            "$ref": "#/components/schemas/core.v1.ListMetadata"
          }
        },
        "title": "ListConnectorSatelliteLinksResponse",
        "additionalProperties": false
      },
      "core.v1.ListConnectorsRequest": {
        "type": "object",
        "properties": {
          "limit": {
            "exclusiveMinimum": 0,
            "type": "integer",
            "title": "limit",
            "maximum": 500,
            "format": "int32"
          },
          "cursor": {
            "type": "string",
            "title": "cursor"
          },
          "order": {
            "type": "string",
            "title": "order"
          },
          "search": {
            "type": "string",
            "title": "search"
          },
          "searchFields": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "id",
                "name"
              ]
            },
            "title": "search_fields"
          },
          "spaceId": {
            "type": "string",
            "title": "space_id",
            "nullable": true
          },
          "filter": {
            "title": "filter",
            "nullable": true,
            "$ref": "#/components/schemas/core.v1.Filter"
          }
        },
        "title": "ListConnectorsRequest",
        "additionalProperties": false
      },
      "core.v1.ListConnectorsResponse": {
        "type": "object",
        "properties": {
          "connectors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/core.v1.Connector"
            },
            "title": "connectors"
          },
          "listMetadata": {
            "title": "list_metadata",
            "$ref": "#/components/schemas/core.v1.ListMetadata"
          }
        },
        "title": "ListConnectorsResponse",
        "additionalProperties": false
      },
      "core.v1.ListMetadata": {
        "type": "object",
        "properties": {
          "after": {
            "type": "string",
            "title": "after"
          },
          "before": {
            "type": "string",
            "title": "before"
          },
          "count": {
            "type": "integer",
            "title": "count",
            "format": "int32"
          },
          "nextCursor": {
            "type": "string",
            "title": "next_cursor"
          }
        },
        "title": "ListMetadata",
        "additionalProperties": false
      },
      "core.v1.Space": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "title": "id",
            "minLength": 1
          },
          "name": {
            "type": "string",
            "title": "name",
            "minLength": 1
          },
          "description": {
            "type": "string",
            "title": "description"
          },
          "terminationProtection": {
            "type": "boolean",
            "title": "termination_protection"
          },
          "createdAt": {
            "title": "created_at",
            "description": "timestamp.lt_now = true\n",
            "$ref": "#/components/schemas/google.protobuf.Timestamp"
          },
          "updatedAt": {
            "title": "updated_at",
            "description": "timestamp.lt_now = true\n",
            "$ref": "#/components/schemas/google.protobuf.Timestamp"
          }
        },
        "title": "Space",
        "additionalProperties": false
      },
      "core.v1.UpdateConnectorConfigurationRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "title": "id",
            "minLength": 1
          },
          "logLevel": {
            "type": "string",
            "title": "log_level",
            "nullable": true
          }
        },
        "title": "UpdateConnectorConfigurationRequest",
        "additionalProperties": false
      },
      "core.v1.UpdateConnectorConfigurationResponse": {
        "type": "object",
        "properties": {
          "connectorConfiguration": {
            "title": "connector_configuration",
            "$ref": "#/components/schemas/core.v1.ConnectorConfiguration"
          }
        },
        "title": "UpdateConnectorConfigurationResponse",
        "additionalProperties": false
      },
      "core.v1.UpdateConnectorHostnameRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "title": "id",
            "minLength": 1
          },
          "hostname": {
            "type": "string",
            "title": "hostname",
            "nullable": true
          },
          "managedTls": {
            "type": "boolean",
            "title": "managed_tls",
            "nullable": true
          },
          "terminationProtection": {
            "type": "boolean",
            "title": "termination_protection",
            "nullable": true
          },
          "dnsRecord": {
            "type": "string",
            "title": "dns_record",
            "nullable": true
          },
          "certificate": {
            "type": "string",
            "title": "certificate",
            "format": "byte",
            "nullable": true
          },
          "privateKey": {
            "type": "string",
            "title": "private_key",
            "format": "byte",
            "nullable": true
          }
        },
        "title": "UpdateConnectorHostnameRequest",
        "additionalProperties": false
      },
      "core.v1.UpdateConnectorHostnameResponse": {
        "type": "object",
        "properties": {
          "connectorHostname": {
            "title": "connector_hostname",
            "$ref": "#/components/schemas/core.v1.ConnectorHostname"
          }
        },
        "title": "UpdateConnectorHostnameResponse",
        "additionalProperties": false
      },
      "core.v1.UpdateConnectorListenerLinkRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "title": "id",
            "minLength": 1
          },
          "terminationProtection": {
            "type": "boolean",
            "title": "termination_protection",
            "nullable": true
          }
        },
        "title": "UpdateConnectorListenerLinkRequest",
        "additionalProperties": false
      },
      "core.v1.UpdateConnectorListenerLinkResponse": {
        "type": "object",
        "properties": {
          "connectorListenerLink": {
            "title": "connector_listener_link",
            "$ref": "#/components/schemas/core.v1.ConnectorListenerLink"
          }
        },
        "title": "UpdateConnectorListenerLinkResponse",
        "additionalProperties": false
      },
      "core.v1.UpdateConnectorListenerRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "title": "id",
            "minLength": 1
          },
          "port": {
            "exclusiveMinimum": 0,
            "type": "integer",
            "title": "port",
            "maximum": 65535,
            "format": "int32",
            "nullable": true
          },
          "terminationProtection": {
            "type": "boolean",
            "title": "termination_protection",
            "nullable": true
          }
        },
        "title": "UpdateConnectorListenerRequest",
        "additionalProperties": false
      },
      "core.v1.UpdateConnectorListenerResponse": {
        "type": "object",
        "properties": {
          "connectorListener": {
            "title": "connector_listener",
            "$ref": "#/components/schemas/core.v1.ConnectorListener"
          }
        },
        "title": "UpdateConnectorListenerResponse",
        "additionalProperties": false
      },
      "core.v1.UpdateConnectorListenerRuleRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "title": "id",
            "minLength": 1
          },
          "terminationProtection": {
            "type": "boolean",
            "title": "termination_protection",
            "nullable": true
          }
        },
        "title": "UpdateConnectorListenerRuleRequest",
        "additionalProperties": false
      },
      "core.v1.UpdateConnectorListenerRuleResponse": {
        "type": "object",
        "properties": {
          "connectorListenerRule": {
            "title": "connector_listener_rule",
            "$ref": "#/components/schemas/core.v1.ConnectorListenerRule"
          }
        },
        "title": "UpdateConnectorListenerRuleResponse",
        "additionalProperties": false
      },
      "core.v1.UpdateConnectorRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "title": "id"
          },
          "terminationProtection": {
            "type": "boolean",
            "title": "termination_protection",
            "nullable": true
          },
          "spaceId": {
            "type": "string",
            "title": "space_id",
            "nullable": true
          }
        },
        "title": "UpdateConnectorRequest",
        "additionalProperties": false
      },
      "core.v1.UpdateConnectorResponse": {
        "type": "object",
        "properties": {
          "connector": {
            "title": "connector",
            "$ref": "#/components/schemas/core.v1.Connector"
          }
        },
        "title": "UpdateConnectorResponse",
        "additionalProperties": false
      },
      "google.protobuf.Any": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "value": {
            "type": "string",
            "format": "binary"
          }
        },
        "additionalProperties": true,
        "description": "Contains an arbitrary serialized message along with a @type that describes the type of the serialized message."
      },
      "google.protobuf.Timestamp": {
        "type": "string",
        "examples": [
          "2023-01-15T01:30:15.01Z",
          "2024-12-25T12:00:00Z"
        ],
        "format": "date-time",
        "description": "A Timestamp represents a point in time independent of any time zone or local\n calendar, encoded as a count of seconds and fractions of seconds at\n nanosecond resolution. The count is relative to an epoch at UTC midnight on\n January 1, 1970, in the proleptic Gregorian calendar which extends the\n Gregorian calendar backwards to year one.\n\n All minutes are 60 seconds long. Leap seconds are \"smeared\" so that no leap\n second table is needed for interpretation, using a [24-hour linear\n smear](https://developers.google.com/time/smear).\n\n The range is from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59.999999999Z. By\n restricting to that range, we ensure that we can convert to and from [RFC\n 3339](https://www.ietf.org/rfc/rfc3339.txt) date strings.\n\n # Examples\n\n Example 1: Compute Timestamp from POSIX `time()`.\n\n     Timestamp timestamp;\n     timestamp.set_seconds(time(NULL));\n     timestamp.set_nanos(0);\n\n Example 2: Compute Timestamp from POSIX `gettimeofday()`.\n\n     struct timeval tv;\n     gettimeofday(&tv, NULL);\n\n     Timestamp timestamp;\n     timestamp.set_seconds(tv.tv_sec);\n     timestamp.set_nanos(tv.tv_usec * 1000);\n\n Example 3: Compute Timestamp from Win32 `GetSystemTimeAsFileTime()`.\n\n     FILETIME ft;\n     GetSystemTimeAsFileTime(&ft);\n     UINT64 ticks = (((UINT64)ft.dwHighDateTime) << 32) | ft.dwLowDateTime;\n\n     // A Windows tick is 100 nanoseconds. Windows epoch 1601-01-01T00:00:00Z\n     // is 11644473600 seconds before Unix epoch 1970-01-01T00:00:00Z.\n     Timestamp timestamp;\n     timestamp.set_seconds((INT64) ((ticks / 10000000) - 11644473600LL));\n     timestamp.set_nanos((INT32) ((ticks % 10000000) * 100));\n\n Example 4: Compute Timestamp from Java `System.currentTimeMillis()`.\n\n     long millis = System.currentTimeMillis();\n\n     Timestamp timestamp = Timestamp.newBuilder().setSeconds(millis / 1000)\n         .setNanos((int) ((millis % 1000) * 1000000)).build();\n\n Example 5: Compute Timestamp from Java `Instant.now()`.\n\n     Instant now = Instant.now();\n\n     Timestamp timestamp =\n         Timestamp.newBuilder().setSeconds(now.getEpochSecond())\n             .setNanos(now.getNano()).build();\n\n Example 6: Compute Timestamp from current time in Python.\n\n     timestamp = Timestamp()\n     timestamp.GetCurrentTime()\n\n # JSON Mapping\n\n In JSON format, the Timestamp type is encoded as a string in the\n [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format. That is, the\n format is \"{year}-{month}-{day}T{hour}:{min}:{sec}[.{frac_sec}]Z\"\n where {year} is always expressed using four digits while {month}, {day},\n {hour}, {min}, and {sec} are zero-padded to two digits each. The fractional\n seconds, which can go up to 9 digits (i.e. up to 1 nanosecond resolution),\n are optional. The \"Z\" suffix indicates the timezone (\"UTC\"); the timezone\n is required. A proto3 JSON serializer should always use UTC (as indicated by\n \"Z\") when printing the Timestamp type and a proto3 JSON parser should be\n able to accept both UTC and other timezones (as indicated by an offset).\n\n For example, \"2017-01-15T01:30:15.01Z\" encodes 15.01 seconds past\n 01:30 UTC on January 15, 2017.\n\n In JavaScript, one can convert a Date object to this format using the\n standard\n [toISOString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString)\n method. In Python, a standard `datetime.datetime` object can be converted\n to this format using\n [`strftime`](https://docs.python.org/2/library/time.html#time.strftime) with\n the time format spec '%Y-%m-%dT%H:%M:%S.%fZ'. Likewise, in Java, one can use\n the Joda Time's [`ISODateTimeFormat.dateTime()`](\n http://joda-time.sourceforge.net/apidocs/org/joda/time/format/ISODateTimeFormat.html#dateTime()\n ) to obtain a formatter capable of generating timestamps in this format."
      }
    },
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "API Key",
        "description": "API key authentication. Get your API key from the Formal dashboard."
      }
    }
  },
  "security": [],
  "tags": [
    {
      "name": "core.v1.ConnectorService"
    }
  ],
  "servers": [
    {
      "url": "https://api.joinformal.com",
      "description": "Production API"
    }
  ]
}