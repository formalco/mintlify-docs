{
  "openapi": "3.1.0",
  "info": {
    "title": "core.v1.GroupService"
  },
  "paths": {
    "/core.v1.GroupService/CreateGroup": {
      "post": {
        "tags": [
          "core.v1.GroupService"
        ],
        "summary": "CreateGroup",
        "operationId": "core.v1.GroupService.CreateGroup",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/core.v1.CreateGroupRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/core.v1.CreateGroupResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid request parameters or body",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "invalid_request"
                    },
                    "message": {
                      "type": "string",
                      "example": "Invalid request parameters"
                    },
                    "details": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "unauthorized"
                    },
                    "message": {
                      "type": "string",
                      "example": "Authentication required"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "forbidden"
                    },
                    "message": {
                      "type": "string",
                      "example": "Insufficient permissions to perform this action"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "not_found"
                    },
                    "message": {
                      "type": "string",
                      "example": "Resource not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - An error occurred processing the request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "internal_error"
                    },
                    "message": {
                      "type": "string",
                      "example": "An internal error occurred"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "curl",
            "label": "cURL",
            "source": "curl -X POST \"https://api.joinformal.com/core.v1.GroupService/CreateGroup\" \\\n  -H \"Authorization: Bearer YOUR_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"example\": \"value\"\n  }'"
          },
          {
            "lang": "javascript",
            "label": "JavaScript (fetch)",
            "source": "fetch(\"https://api.joinformal.com/core.v1.GroupService/CreateGroup\", {\n  method: \"POST\",\n  headers: {\n    \"Authorization\": \"Bearer YOUR_API_KEY\",\n    \"Content-Type\": \"application/json\"\n  },\n  body: JSON.stringify({\n    example: \"value\"\n  })\n})\n  .then(response => response.json())\n  .then(data => console.log(data))\n  .catch(error => console.error(error));"
          },
          {
            "lang": "python",
            "label": "Python",
            "source": "import requests\n\nurl = \"https://api.joinformal.com/core.v1.GroupService/CreateGroup\"\nheaders = {\n    \"Authorization\": \"Bearer YOUR_API_KEY\",\n    \"Content-Type\": \"application/json\"\n}\ndata = {\n    \"example\": \"value\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())"
          },
          {
            "lang": "go",
            "label": "Go",
            "source": "package main\n\nimport (\n    \"bytes\"\n    \"encoding/json\"\n    \"fmt\"\n    \"io\"\n    \"net/http\"\n)\n\nfunc main() {\n    url := \"https://api.joinformal.com/core.v1.GroupService/CreateGroup\"\n\n    body := map[string]string{\n        \"example\": \"value\",\n    }\n\n    jsonData, _ := json.Marshal(body)\n\n    req, _ := http.NewRequest(\"POST\", url, bytes.NewBuffer(jsonData))\n    req.Header.Set(\"Authorization\", \"Bearer YOUR_API_KEY\")\n    req.Header.Set(\"Content-Type\", \"application/json\")\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        panic(err)\n    }\n    defer resp.Body.Close()\n\n    responseBody, _ := io.ReadAll(resp.Body)\n    fmt.Println(string(responseBody))\n}"
          }
        ]
      }
    },
    "/core.v1.GroupService/CreateUserGroupLink": {
      "post": {
        "tags": [
          "core.v1.GroupService"
        ],
        "summary": "CreateUserGroupLink",
        "operationId": "core.v1.GroupService.CreateUserGroupLink",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/core.v1.CreateUserGroupLinkRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/core.v1.CreateUserGroupLinkResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid request parameters or body",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "invalid_request"
                    },
                    "message": {
                      "type": "string",
                      "example": "Invalid request parameters"
                    },
                    "details": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "unauthorized"
                    },
                    "message": {
                      "type": "string",
                      "example": "Authentication required"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "forbidden"
                    },
                    "message": {
                      "type": "string",
                      "example": "Insufficient permissions to perform this action"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "not_found"
                    },
                    "message": {
                      "type": "string",
                      "example": "Resource not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - An error occurred processing the request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "internal_error"
                    },
                    "message": {
                      "type": "string",
                      "example": "An internal error occurred"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "curl",
            "label": "cURL",
            "source": "curl -X POST \"https://api.joinformal.com/core.v1.GroupService/CreateUserGroupLink\" \\\n  -H \"Authorization: Bearer YOUR_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"example\": \"value\"\n  }'"
          },
          {
            "lang": "javascript",
            "label": "JavaScript (fetch)",
            "source": "fetch(\"https://api.joinformal.com/core.v1.GroupService/CreateUserGroupLink\", {\n  method: \"POST\",\n  headers: {\n    \"Authorization\": \"Bearer YOUR_API_KEY\",\n    \"Content-Type\": \"application/json\"\n  },\n  body: JSON.stringify({\n    example: \"value\"\n  })\n})\n  .then(response => response.json())\n  .then(data => console.log(data))\n  .catch(error => console.error(error));"
          },
          {
            "lang": "python",
            "label": "Python",
            "source": "import requests\n\nurl = \"https://api.joinformal.com/core.v1.GroupService/CreateUserGroupLink\"\nheaders = {\n    \"Authorization\": \"Bearer YOUR_API_KEY\",\n    \"Content-Type\": \"application/json\"\n}\ndata = {\n    \"example\": \"value\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())"
          },
          {
            "lang": "go",
            "label": "Go",
            "source": "package main\n\nimport (\n    \"bytes\"\n    \"encoding/json\"\n    \"fmt\"\n    \"io\"\n    \"net/http\"\n)\n\nfunc main() {\n    url := \"https://api.joinformal.com/core.v1.GroupService/CreateUserGroupLink\"\n\n    body := map[string]string{\n        \"example\": \"value\",\n    }\n\n    jsonData, _ := json.Marshal(body)\n\n    req, _ := http.NewRequest(\"POST\", url, bytes.NewBuffer(jsonData))\n    req.Header.Set(\"Authorization\", \"Bearer YOUR_API_KEY\")\n    req.Header.Set(\"Content-Type\", \"application/json\")\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        panic(err)\n    }\n    defer resp.Body.Close()\n\n    responseBody, _ := io.ReadAll(resp.Body)\n    fmt.Println(string(responseBody))\n}"
          }
        ]
      }
    },
    "/core.v1.GroupService/DeleteGroup": {
      "post": {
        "tags": [
          "core.v1.GroupService"
        ],
        "summary": "DeleteGroup",
        "operationId": "core.v1.GroupService.DeleteGroup",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/core.v1.DeleteGroupRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/core.v1.DeleteGroupResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid request parameters or body",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "invalid_request"
                    },
                    "message": {
                      "type": "string",
                      "example": "Invalid request parameters"
                    },
                    "details": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "unauthorized"
                    },
                    "message": {
                      "type": "string",
                      "example": "Authentication required"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "forbidden"
                    },
                    "message": {
                      "type": "string",
                      "example": "Insufficient permissions to perform this action"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "not_found"
                    },
                    "message": {
                      "type": "string",
                      "example": "Resource not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - An error occurred processing the request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "internal_error"
                    },
                    "message": {
                      "type": "string",
                      "example": "An internal error occurred"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "curl",
            "label": "cURL",
            "source": "curl -X POST \"https://api.joinformal.com/core.v1.GroupService/DeleteGroup\" \\\n  -H \"Authorization: Bearer YOUR_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"example\": \"value\"\n  }'"
          },
          {
            "lang": "javascript",
            "label": "JavaScript (fetch)",
            "source": "fetch(\"https://api.joinformal.com/core.v1.GroupService/DeleteGroup\", {\n  method: \"POST\",\n  headers: {\n    \"Authorization\": \"Bearer YOUR_API_KEY\",\n    \"Content-Type\": \"application/json\"\n  },\n  body: JSON.stringify({\n    example: \"value\"\n  })\n})\n  .then(response => response.json())\n  .then(data => console.log(data))\n  .catch(error => console.error(error));"
          },
          {
            "lang": "python",
            "label": "Python",
            "source": "import requests\n\nurl = \"https://api.joinformal.com/core.v1.GroupService/DeleteGroup\"\nheaders = {\n    \"Authorization\": \"Bearer YOUR_API_KEY\",\n    \"Content-Type\": \"application/json\"\n}\ndata = {\n    \"example\": \"value\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())"
          },
          {
            "lang": "go",
            "label": "Go",
            "source": "package main\n\nimport (\n    \"bytes\"\n    \"encoding/json\"\n    \"fmt\"\n    \"io\"\n    \"net/http\"\n)\n\nfunc main() {\n    url := \"https://api.joinformal.com/core.v1.GroupService/DeleteGroup\"\n\n    body := map[string]string{\n        \"example\": \"value\",\n    }\n\n    jsonData, _ := json.Marshal(body)\n\n    req, _ := http.NewRequest(\"POST\", url, bytes.NewBuffer(jsonData))\n    req.Header.Set(\"Authorization\", \"Bearer YOUR_API_KEY\")\n    req.Header.Set(\"Content-Type\", \"application/json\")\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        panic(err)\n    }\n    defer resp.Body.Close()\n\n    responseBody, _ := io.ReadAll(resp.Body)\n    fmt.Println(string(responseBody))\n}"
          }
        ]
      }
    },
    "/core.v1.GroupService/DeleteUserGroupLink": {
      "post": {
        "tags": [
          "core.v1.GroupService"
        ],
        "summary": "DeleteUserGroupLink",
        "operationId": "core.v1.GroupService.DeleteUserGroupLink",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/core.v1.DeleteUserGroupLinkRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/core.v1.DeleteUserGroupLinkResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid request parameters or body",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "invalid_request"
                    },
                    "message": {
                      "type": "string",
                      "example": "Invalid request parameters"
                    },
                    "details": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "unauthorized"
                    },
                    "message": {
                      "type": "string",
                      "example": "Authentication required"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "forbidden"
                    },
                    "message": {
                      "type": "string",
                      "example": "Insufficient permissions to perform this action"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "not_found"
                    },
                    "message": {
                      "type": "string",
                      "example": "Resource not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - An error occurred processing the request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "internal_error"
                    },
                    "message": {
                      "type": "string",
                      "example": "An internal error occurred"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "curl",
            "label": "cURL",
            "source": "curl -X POST \"https://api.joinformal.com/core.v1.GroupService/DeleteUserGroupLink\" \\\n  -H \"Authorization: Bearer YOUR_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"example\": \"value\"\n  }'"
          },
          {
            "lang": "javascript",
            "label": "JavaScript (fetch)",
            "source": "fetch(\"https://api.joinformal.com/core.v1.GroupService/DeleteUserGroupLink\", {\n  method: \"POST\",\n  headers: {\n    \"Authorization\": \"Bearer YOUR_API_KEY\",\n    \"Content-Type\": \"application/json\"\n  },\n  body: JSON.stringify({\n    example: \"value\"\n  })\n})\n  .then(response => response.json())\n  .then(data => console.log(data))\n  .catch(error => console.error(error));"
          },
          {
            "lang": "python",
            "label": "Python",
            "source": "import requests\n\nurl = \"https://api.joinformal.com/core.v1.GroupService/DeleteUserGroupLink\"\nheaders = {\n    \"Authorization\": \"Bearer YOUR_API_KEY\",\n    \"Content-Type\": \"application/json\"\n}\ndata = {\n    \"example\": \"value\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())"
          },
          {
            "lang": "go",
            "label": "Go",
            "source": "package main\n\nimport (\n    \"bytes\"\n    \"encoding/json\"\n    \"fmt\"\n    \"io\"\n    \"net/http\"\n)\n\nfunc main() {\n    url := \"https://api.joinformal.com/core.v1.GroupService/DeleteUserGroupLink\"\n\n    body := map[string]string{\n        \"example\": \"value\",\n    }\n\n    jsonData, _ := json.Marshal(body)\n\n    req, _ := http.NewRequest(\"POST\", url, bytes.NewBuffer(jsonData))\n    req.Header.Set(\"Authorization\", \"Bearer YOUR_API_KEY\")\n    req.Header.Set(\"Content-Type\", \"application/json\")\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        panic(err)\n    }\n    defer resp.Body.Close()\n\n    responseBody, _ := io.ReadAll(resp.Body)\n    fmt.Println(string(responseBody))\n}"
          }
        ]
      }
    },
    "/core.v1.GroupService/GetGroup": {
      "post": {
        "tags": [
          "core.v1.GroupService"
        ],
        "summary": "GetGroup",
        "operationId": "core.v1.GroupService.GetGroup",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/core.v1.GetGroupRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/core.v1.GetGroupResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid request parameters or body",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "invalid_request"
                    },
                    "message": {
                      "type": "string",
                      "example": "Invalid request parameters"
                    },
                    "details": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "unauthorized"
                    },
                    "message": {
                      "type": "string",
                      "example": "Authentication required"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "forbidden"
                    },
                    "message": {
                      "type": "string",
                      "example": "Insufficient permissions to perform this action"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "not_found"
                    },
                    "message": {
                      "type": "string",
                      "example": "Resource not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - An error occurred processing the request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "internal_error"
                    },
                    "message": {
                      "type": "string",
                      "example": "An internal error occurred"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "curl",
            "label": "cURL",
            "source": "curl -X POST \"https://api.joinformal.com/core.v1.GroupService/GetGroup\" \\\n  -H \"Authorization: Bearer YOUR_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"example\": \"value\"\n  }'"
          },
          {
            "lang": "javascript",
            "label": "JavaScript (fetch)",
            "source": "fetch(\"https://api.joinformal.com/core.v1.GroupService/GetGroup\", {\n  method: \"POST\",\n  headers: {\n    \"Authorization\": \"Bearer YOUR_API_KEY\",\n    \"Content-Type\": \"application/json\"\n  },\n  body: JSON.stringify({\n    example: \"value\"\n  })\n})\n  .then(response => response.json())\n  .then(data => console.log(data))\n  .catch(error => console.error(error));"
          },
          {
            "lang": "python",
            "label": "Python",
            "source": "import requests\n\nurl = \"https://api.joinformal.com/core.v1.GroupService/GetGroup\"\nheaders = {\n    \"Authorization\": \"Bearer YOUR_API_KEY\",\n    \"Content-Type\": \"application/json\"\n}\ndata = {\n    \"example\": \"value\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())"
          },
          {
            "lang": "go",
            "label": "Go",
            "source": "package main\n\nimport (\n    \"bytes\"\n    \"encoding/json\"\n    \"fmt\"\n    \"io\"\n    \"net/http\"\n)\n\nfunc main() {\n    url := \"https://api.joinformal.com/core.v1.GroupService/GetGroup\"\n\n    body := map[string]string{\n        \"example\": \"value\",\n    }\n\n    jsonData, _ := json.Marshal(body)\n\n    req, _ := http.NewRequest(\"POST\", url, bytes.NewBuffer(jsonData))\n    req.Header.Set(\"Authorization\", \"Bearer YOUR_API_KEY\")\n    req.Header.Set(\"Content-Type\", \"application/json\")\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        panic(err)\n    }\n    defer resp.Body.Close()\n\n    responseBody, _ := io.ReadAll(resp.Body)\n    fmt.Println(string(responseBody))\n}"
          }
        ]
      }
    },
    "/core.v1.GroupService/ListGroups": {
      "post": {
        "tags": [
          "core.v1.GroupService"
        ],
        "summary": "ListGroups",
        "operationId": "core.v1.GroupService.ListGroups",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/core.v1.ListGroupsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/core.v1.ListGroupsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid request parameters or body",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "invalid_request"
                    },
                    "message": {
                      "type": "string",
                      "example": "Invalid request parameters"
                    },
                    "details": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "unauthorized"
                    },
                    "message": {
                      "type": "string",
                      "example": "Authentication required"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "forbidden"
                    },
                    "message": {
                      "type": "string",
                      "example": "Insufficient permissions to perform this action"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "not_found"
                    },
                    "message": {
                      "type": "string",
                      "example": "Resource not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - An error occurred processing the request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "internal_error"
                    },
                    "message": {
                      "type": "string",
                      "example": "An internal error occurred"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "curl",
            "label": "cURL",
            "source": "curl -X POST \"https://api.joinformal.com/core.v1.GroupService/ListGroups\" \\\n  -H \"Authorization: Bearer YOUR_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"example\": \"value\"\n  }'"
          },
          {
            "lang": "javascript",
            "label": "JavaScript (fetch)",
            "source": "fetch(\"https://api.joinformal.com/core.v1.GroupService/ListGroups\", {\n  method: \"POST\",\n  headers: {\n    \"Authorization\": \"Bearer YOUR_API_KEY\",\n    \"Content-Type\": \"application/json\"\n  },\n  body: JSON.stringify({\n    example: \"value\"\n  })\n})\n  .then(response => response.json())\n  .then(data => console.log(data))\n  .catch(error => console.error(error));"
          },
          {
            "lang": "python",
            "label": "Python",
            "source": "import requests\n\nurl = \"https://api.joinformal.com/core.v1.GroupService/ListGroups\"\nheaders = {\n    \"Authorization\": \"Bearer YOUR_API_KEY\",\n    \"Content-Type\": \"application/json\"\n}\ndata = {\n    \"example\": \"value\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())"
          },
          {
            "lang": "go",
            "label": "Go",
            "source": "package main\n\nimport (\n    \"bytes\"\n    \"encoding/json\"\n    \"fmt\"\n    \"io\"\n    \"net/http\"\n)\n\nfunc main() {\n    url := \"https://api.joinformal.com/core.v1.GroupService/ListGroups\"\n\n    body := map[string]string{\n        \"example\": \"value\",\n    }\n\n    jsonData, _ := json.Marshal(body)\n\n    req, _ := http.NewRequest(\"POST\", url, bytes.NewBuffer(jsonData))\n    req.Header.Set(\"Authorization\", \"Bearer YOUR_API_KEY\")\n    req.Header.Set(\"Content-Type\", \"application/json\")\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        panic(err)\n    }\n    defer resp.Body.Close()\n\n    responseBody, _ := io.ReadAll(resp.Body)\n    fmt.Println(string(responseBody))\n}"
          }
        ]
      }
    },
    "/core.v1.GroupService/ListUserGroupLinks": {
      "post": {
        "tags": [
          "core.v1.GroupService"
        ],
        "summary": "ListUserGroupLinks",
        "operationId": "core.v1.GroupService.ListUserGroupLinks",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/core.v1.ListUserGroupLinksRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/core.v1.ListUserGroupLinksResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid request parameters or body",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "invalid_request"
                    },
                    "message": {
                      "type": "string",
                      "example": "Invalid request parameters"
                    },
                    "details": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "unauthorized"
                    },
                    "message": {
                      "type": "string",
                      "example": "Authentication required"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "forbidden"
                    },
                    "message": {
                      "type": "string",
                      "example": "Insufficient permissions to perform this action"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "not_found"
                    },
                    "message": {
                      "type": "string",
                      "example": "Resource not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - An error occurred processing the request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "internal_error"
                    },
                    "message": {
                      "type": "string",
                      "example": "An internal error occurred"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "curl",
            "label": "cURL",
            "source": "curl -X POST \"https://api.joinformal.com/core.v1.GroupService/ListUserGroupLinks\" \\\n  -H \"Authorization: Bearer YOUR_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"example\": \"value\"\n  }'"
          },
          {
            "lang": "javascript",
            "label": "JavaScript (fetch)",
            "source": "fetch(\"https://api.joinformal.com/core.v1.GroupService/ListUserGroupLinks\", {\n  method: \"POST\",\n  headers: {\n    \"Authorization\": \"Bearer YOUR_API_KEY\",\n    \"Content-Type\": \"application/json\"\n  },\n  body: JSON.stringify({\n    example: \"value\"\n  })\n})\n  .then(response => response.json())\n  .then(data => console.log(data))\n  .catch(error => console.error(error));"
          },
          {
            "lang": "python",
            "label": "Python",
            "source": "import requests\n\nurl = \"https://api.joinformal.com/core.v1.GroupService/ListUserGroupLinks\"\nheaders = {\n    \"Authorization\": \"Bearer YOUR_API_KEY\",\n    \"Content-Type\": \"application/json\"\n}\ndata = {\n    \"example\": \"value\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())"
          },
          {
            "lang": "go",
            "label": "Go",
            "source": "package main\n\nimport (\n    \"bytes\"\n    \"encoding/json\"\n    \"fmt\"\n    \"io\"\n    \"net/http\"\n)\n\nfunc main() {\n    url := \"https://api.joinformal.com/core.v1.GroupService/ListUserGroupLinks\"\n\n    body := map[string]string{\n        \"example\": \"value\",\n    }\n\n    jsonData, _ := json.Marshal(body)\n\n    req, _ := http.NewRequest(\"POST\", url, bytes.NewBuffer(jsonData))\n    req.Header.Set(\"Authorization\", \"Bearer YOUR_API_KEY\")\n    req.Header.Set(\"Content-Type\", \"application/json\")\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        panic(err)\n    }\n    defer resp.Body.Close()\n\n    responseBody, _ := io.ReadAll(resp.Body)\n    fmt.Println(string(responseBody))\n}"
          }
        ]
      }
    },
    "/core.v1.GroupService/UpdateGroup": {
      "post": {
        "tags": [
          "core.v1.GroupService"
        ],
        "summary": "UpdateGroup",
        "operationId": "core.v1.GroupService.UpdateGroup",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/core.v1.UpdateGroupRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/core.v1.UpdateGroupResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid request parameters or body",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "invalid_request"
                    },
                    "message": {
                      "type": "string",
                      "example": "Invalid request parameters"
                    },
                    "details": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "unauthorized"
                    },
                    "message": {
                      "type": "string",
                      "example": "Authentication required"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "forbidden"
                    },
                    "message": {
                      "type": "string",
                      "example": "Insufficient permissions to perform this action"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "not_found"
                    },
                    "message": {
                      "type": "string",
                      "example": "Resource not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - An error occurred processing the request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "internal_error"
                    },
                    "message": {
                      "type": "string",
                      "example": "An internal error occurred"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "curl",
            "label": "cURL",
            "source": "curl -X POST \"https://api.joinformal.com/core.v1.GroupService/UpdateGroup\" \\\n  -H \"Authorization: Bearer YOUR_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"example\": \"value\"\n  }'"
          },
          {
            "lang": "javascript",
            "label": "JavaScript (fetch)",
            "source": "fetch(\"https://api.joinformal.com/core.v1.GroupService/UpdateGroup\", {\n  method: \"POST\",\n  headers: {\n    \"Authorization\": \"Bearer YOUR_API_KEY\",\n    \"Content-Type\": \"application/json\"\n  },\n  body: JSON.stringify({\n    example: \"value\"\n  })\n})\n  .then(response => response.json())\n  .then(data => console.log(data))\n  .catch(error => console.error(error));"
          },
          {
            "lang": "python",
            "label": "Python",
            "source": "import requests\n\nurl = \"https://api.joinformal.com/core.v1.GroupService/UpdateGroup\"\nheaders = {\n    \"Authorization\": \"Bearer YOUR_API_KEY\",\n    \"Content-Type\": \"application/json\"\n}\ndata = {\n    \"example\": \"value\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())"
          },
          {
            "lang": "go",
            "label": "Go",
            "source": "package main\n\nimport (\n    \"bytes\"\n    \"encoding/json\"\n    \"fmt\"\n    \"io\"\n    \"net/http\"\n)\n\nfunc main() {\n    url := \"https://api.joinformal.com/core.v1.GroupService/UpdateGroup\"\n\n    body := map[string]string{\n        \"example\": \"value\",\n    }\n\n    jsonData, _ := json.Marshal(body)\n\n    req, _ := http.NewRequest(\"POST\", url, bytes.NewBuffer(jsonData))\n    req.Header.Set(\"Authorization\", \"Bearer YOUR_API_KEY\")\n    req.Header.Set(\"Content-Type\", \"application/json\")\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        panic(err)\n    }\n    defer resp.Body.Close()\n\n    responseBody, _ := io.ReadAll(resp.Body)\n    fmt.Println(string(responseBody))\n}"
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "core.v1.CreateGroupRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "title": "name",
            "minLength": 1
          },
          "description": {
            "type": "string",
            "title": "description"
          },
          "terminationProtection": {
            "type": "boolean",
            "title": "termination_protection"
          }
        },
        "title": "CreateGroupRequest",
        "additionalProperties": false
      },
      "core.v1.CreateGroupResponse": {
        "type": "object",
        "properties": {
          "group": {
            "title": "group",
            "$ref": "#/components/schemas/core.v1.Group"
          }
        },
        "title": "CreateGroupResponse",
        "additionalProperties": false
      },
      "core.v1.CreateUserGroupLinkRequest": {
        "type": "object",
        "properties": {
          "groupId": {
            "type": "string",
            "title": "group_id",
            "minLength": 1
          },
          "userId": {
            "type": "string",
            "title": "user_id",
            "minLength": 1
          },
          "terminationProtection": {
            "type": "boolean",
            "title": "termination_protection"
          }
        },
        "title": "CreateUserGroupLinkRequest",
        "additionalProperties": false
      },
      "core.v1.CreateUserGroupLinkResponse": {
        "type": "object",
        "properties": {
          "userGroupLink": {
            "title": "user_group_link",
            "$ref": "#/components/schemas/core.v1.UserGroupLink"
          }
        },
        "title": "CreateUserGroupLinkResponse",
        "additionalProperties": false
      },
      "core.v1.DeleteGroupRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "title": "id",
            "minLength": 1
          }
        },
        "title": "DeleteGroupRequest",
        "additionalProperties": false
      },
      "core.v1.DeleteGroupResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "title": "id",
            "minLength": 1
          }
        },
        "title": "DeleteGroupResponse",
        "additionalProperties": false
      },
      "core.v1.DeleteUserGroupLinkRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "title": "id",
            "minLength": 1
          }
        },
        "title": "DeleteUserGroupLinkRequest",
        "additionalProperties": false
      },
      "core.v1.DeleteUserGroupLinkResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "title": "id",
            "minLength": 1
          }
        },
        "title": "DeleteUserGroupLinkResponse",
        "additionalProperties": false
      },
      "core.v1.Field": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "title": "key",
            "minLength": 1
          },
          "operator": {
            "type": "string",
            "title": "operator",
            "enum": [
              "equals",
              "not_equals",
              "contains",
              "not_contains",
              "empty",
              "not_empty",
              "starts_with",
              "ends_with",
              "lower_than",
              "greater_than"
            ]
          },
          "value": {
            "title": "value",
            "nullable": true,
            "$ref": "#/components/schemas/google.protobuf.Any"
          }
        },
        "title": "Field",
        "additionalProperties": false
      },
      "core.v1.FieldGroup": {
        "type": "object",
        "properties": {
          "operator": {
            "type": "string",
            "title": "operator",
            "enum": [
              "and",
              "or"
            ]
          },
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/core.v1.Filter"
            },
            "title": "filters",
            "minItems": 1
          }
        },
        "title": "FieldGroup",
        "additionalProperties": false
      },
      "core.v1.Filter": {
        "type": "object",
        "properties": {
          "field": {
            "title": "field",
            "nullable": true,
            "$ref": "#/components/schemas/core.v1.Field"
          },
          "group": {
            "title": "group",
            "nullable": true,
            "$ref": "#/components/schemas/core.v1.FieldGroup"
          }
        },
        "title": "Filter",
        "additionalProperties": false
      },
      "core.v1.GetGroupRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "title": "id",
            "minLength": 1
          }
        },
        "title": "GetGroupRequest",
        "additionalProperties": false
      },
      "core.v1.GetGroupResponse": {
        "type": "object",
        "properties": {
          "group": {
            "title": "group",
            "$ref": "#/components/schemas/core.v1.Group"
          }
        },
        "title": "GetGroupResponse",
        "additionalProperties": false
      },
      "core.v1.Group": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "title": "id",
            "minLength": 1
          },
          "name": {
            "type": "string",
            "title": "name",
            "minLength": 1
          },
          "description": {
            "type": "string",
            "title": "description"
          },
          "dsyncGroupId": {
            "type": "string",
            "title": "dsync_group_id"
          },
          "terminationProtection": {
            "type": "boolean",
            "title": "termination_protection"
          },
          "createdAt": {
            "title": "created_at",
            "description": "timestamp.lt_now = true\n",
            "$ref": "#/components/schemas/google.protobuf.Timestamp"
          },
          "updatedAt": {
            "title": "updated_at",
            "description": "timestamp.lt_now = true\n",
            "$ref": "#/components/schemas/google.protobuf.Timestamp"
          }
        },
        "title": "Group",
        "additionalProperties": false
      },
      "core.v1.ListGroupsRequest": {
        "type": "object",
        "properties": {
          "limit": {
            "exclusiveMinimum": 0,
            "type": "integer",
            "title": "limit",
            "maximum": 500,
            "format": "int32"
          },
          "cursor": {
            "type": "string",
            "title": "cursor"
          },
          "order": {
            "type": "string",
            "title": "order"
          },
          "search": {
            "type": "string",
            "title": "search"
          },
          "searchFields": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "id",
                "name",
                "description"
              ]
            },
            "title": "search_fields"
          },
          "filter": {
            "title": "filter",
            "nullable": true,
            "$ref": "#/components/schemas/core.v1.Filter"
          }
        },
        "title": "ListGroupsRequest",
        "additionalProperties": false
      },
      "core.v1.ListGroupsResponse": {
        "type": "object",
        "properties": {
          "groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/core.v1.Group"
            },
            "title": "groups"
          },
          "listMetadata": {
            "title": "list_metadata",
            "$ref": "#/components/schemas/core.v1.ListMetadata"
          }
        },
        "title": "ListGroupsResponse",
        "additionalProperties": false
      },
      "core.v1.ListMetadata": {
        "type": "object",
        "properties": {
          "after": {
            "type": "string",
            "title": "after"
          },
          "before": {
            "type": "string",
            "title": "before"
          },
          "count": {
            "type": "integer",
            "title": "count",
            "format": "int32"
          },
          "nextCursor": {
            "type": "string",
            "title": "next_cursor"
          }
        },
        "title": "ListMetadata",
        "additionalProperties": false
      },
      "core.v1.ListUserGroupLinksRequest": {
        "type": "object",
        "allOf": [
          {
            "properties": {
              "groupId": {
                "type": "string",
                "title": "group_id",
                "minLength": 1
              },
              "limit": {
                "exclusiveMinimum": 0,
                "type": "integer",
                "title": "limit",
                "maximum": 500,
                "format": "int32"
              },
              "cursor": {
                "type": "string",
                "title": "cursor"
              },
              "order": {
                "type": "string",
                "title": "order"
              }
            }
          },
          {
            "oneOf": [
              {
                "properties": {
                  "groupId2": {
                    "type": "string",
                    "title": "group_id2",
                    "minLength": 1
                  }
                },
                "title": "group_id2",
                "required": [
                  "groupId2"
                ]
              },
              {
                "properties": {
                  "userId": {
                    "type": "string",
                    "title": "user_id",
                    "minLength": 1
                  }
                },
                "title": "user_id",
                "required": [
                  "userId"
                ]
              }
            ]
          }
        ],
        "title": "ListUserGroupLinksRequest",
        "additionalProperties": false
      },
      "core.v1.ListUserGroupLinksResponse": {
        "type": "object",
        "properties": {
          "userGroupLinks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/core.v1.UserGroupLink"
            },
            "title": "user_group_links"
          },
          "listMetadata": {
            "title": "list_metadata",
            "$ref": "#/components/schemas/core.v1.ListMetadata"
          }
        },
        "title": "ListUserGroupLinksResponse",
        "additionalProperties": false
      },
      "core.v1.UpdateGroupRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "title": "id",
            "minLength": 1
          },
          "name": {
            "type": "string",
            "title": "name",
            "nullable": true
          },
          "description": {
            "type": "string",
            "title": "description",
            "nullable": true
          },
          "terminationProtection": {
            "type": "boolean",
            "title": "termination_protection",
            "nullable": true
          }
        },
        "title": "UpdateGroupRequest",
        "additionalProperties": false
      },
      "core.v1.UpdateGroupResponse": {
        "type": "object",
        "properties": {
          "group": {
            "title": "group",
            "$ref": "#/components/schemas/core.v1.Group"
          }
        },
        "title": "UpdateGroupResponse",
        "additionalProperties": false
      },
      "core.v1.User": {
        "type": "object",
        "allOf": [
          {
            "properties": {
              "id": {
                "type": "string",
                "title": "id",
                "minLength": 1
              },
              "dbUsername": {
                "type": "string",
                "title": "db_username",
                "minLength": 1
              },
              "type": {
                "type": "string",
                "title": "type",
                "enum": [
                  "machine",
                  "human"
                ]
              },
              "terminationProtection": {
                "type": "boolean",
                "title": "termination_protection"
              },
              "expireAt": {
                "title": "expire_at",
                "$ref": "#/components/schemas/google.protobuf.Timestamp"
              },
              "createdAt": {
                "title": "created_at",
                "description": "timestamp.lt_now = true\n",
                "$ref": "#/components/schemas/google.protobuf.Timestamp"
              },
              "updatedAt": {
                "title": "updated_at",
                "description": "timestamp.lt_now = true\n",
                "$ref": "#/components/schemas/google.protobuf.Timestamp"
              }
            }
          },
          {
            "oneOf": [
              {
                "properties": {
                  "human": {
                    "title": "human",
                    "$ref": "#/components/schemas/core.v1.User.Human"
                  }
                },
                "title": "human",
                "required": [
                  "human"
                ]
              },
              {
                "properties": {
                  "machine": {
                    "title": "machine",
                    "$ref": "#/components/schemas/core.v1.User.Machine"
                  }
                },
                "title": "machine",
                "required": [
                  "machine"
                ]
              }
            ]
          }
        ],
        "title": "User",
        "additionalProperties": false
      },
      "core.v1.User.Human": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "title": "first_name",
            "minLength": 1
          },
          "lastName": {
            "type": "string",
            "title": "last_name",
            "minLength": 1
          },
          "email": {
            "type": "string",
            "title": "email",
            "format": "email"
          }
        },
        "title": "Human",
        "additionalProperties": false
      },
      "core.v1.User.Machine": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "title": "name",
            "minLength": 1
          }
        },
        "title": "Machine",
        "additionalProperties": false
      },
      "core.v1.UserGroupLink": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "title": "id",
            "minLength": 1
          },
          "group": {
            "title": "group",
            "$ref": "#/components/schemas/core.v1.Group"
          },
          "user": {
            "title": "user",
            "$ref": "#/components/schemas/core.v1.User"
          },
          "terminationProtection": {
            "type": "boolean",
            "title": "termination_protection"
          },
          "createdAt": {
            "title": "created_at",
            "description": "timestamp.lt_now = true\n",
            "$ref": "#/components/schemas/google.protobuf.Timestamp"
          },
          "updatedAt": {
            "title": "updated_at",
            "description": "timestamp.lt_now = true\n",
            "$ref": "#/components/schemas/google.protobuf.Timestamp"
          }
        },
        "title": "UserGroupLink",
        "additionalProperties": false
      },
      "google.protobuf.Any": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "value": {
            "type": "string",
            "format": "binary"
          }
        },
        "additionalProperties": true,
        "description": "Contains an arbitrary serialized message along with a @type that describes the type of the serialized message."
      },
      "google.protobuf.Timestamp": {
        "type": "string",
        "examples": [
          "2023-01-15T01:30:15.01Z",
          "2024-12-25T12:00:00Z"
        ],
        "format": "date-time",
        "description": "A Timestamp represents a point in time independent of any time zone or local\n calendar, encoded as a count of seconds and fractions of seconds at\n nanosecond resolution. The count is relative to an epoch at UTC midnight on\n January 1, 1970, in the proleptic Gregorian calendar which extends the\n Gregorian calendar backwards to year one.\n\n All minutes are 60 seconds long. Leap seconds are \"smeared\" so that no leap\n second table is needed for interpretation, using a [24-hour linear\n smear](https://developers.google.com/time/smear).\n\n The range is from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59.999999999Z. By\n restricting to that range, we ensure that we can convert to and from [RFC\n 3339](https://www.ietf.org/rfc/rfc3339.txt) date strings.\n\n # Examples\n\n Example 1: Compute Timestamp from POSIX `time()`.\n\n     Timestamp timestamp;\n     timestamp.set_seconds(time(NULL));\n     timestamp.set_nanos(0);\n\n Example 2: Compute Timestamp from POSIX `gettimeofday()`.\n\n     struct timeval tv;\n     gettimeofday(&tv, NULL);\n\n     Timestamp timestamp;\n     timestamp.set_seconds(tv.tv_sec);\n     timestamp.set_nanos(tv.tv_usec * 1000);\n\n Example 3: Compute Timestamp from Win32 `GetSystemTimeAsFileTime()`.\n\n     FILETIME ft;\n     GetSystemTimeAsFileTime(&ft);\n     UINT64 ticks = (((UINT64)ft.dwHighDateTime) << 32) | ft.dwLowDateTime;\n\n     // A Windows tick is 100 nanoseconds. Windows epoch 1601-01-01T00:00:00Z\n     // is 11644473600 seconds before Unix epoch 1970-01-01T00:00:00Z.\n     Timestamp timestamp;\n     timestamp.set_seconds((INT64) ((ticks / 10000000) - 11644473600LL));\n     timestamp.set_nanos((INT32) ((ticks % 10000000) * 100));\n\n Example 4: Compute Timestamp from Java `System.currentTimeMillis()`.\n\n     long millis = System.currentTimeMillis();\n\n     Timestamp timestamp = Timestamp.newBuilder().setSeconds(millis / 1000)\n         .setNanos((int) ((millis % 1000) * 1000000)).build();\n\n Example 5: Compute Timestamp from Java `Instant.now()`.\n\n     Instant now = Instant.now();\n\n     Timestamp timestamp =\n         Timestamp.newBuilder().setSeconds(now.getEpochSecond())\n             .setNanos(now.getNano()).build();\n\n Example 6: Compute Timestamp from current time in Python.\n\n     timestamp = Timestamp()\n     timestamp.GetCurrentTime()\n\n # JSON Mapping\n\n In JSON format, the Timestamp type is encoded as a string in the\n [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format. That is, the\n format is \"{year}-{month}-{day}T{hour}:{min}:{sec}[.{frac_sec}]Z\"\n where {year} is always expressed using four digits while {month}, {day},\n {hour}, {min}, and {sec} are zero-padded to two digits each. The fractional\n seconds, which can go up to 9 digits (i.e. up to 1 nanosecond resolution),\n are optional. The \"Z\" suffix indicates the timezone (\"UTC\"); the timezone\n is required. A proto3 JSON serializer should always use UTC (as indicated by\n \"Z\") when printing the Timestamp type and a proto3 JSON parser should be\n able to accept both UTC and other timezones (as indicated by an offset).\n\n For example, \"2017-01-15T01:30:15.01Z\" encodes 15.01 seconds past\n 01:30 UTC on January 15, 2017.\n\n In JavaScript, one can convert a Date object to this format using the\n standard\n [toISOString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString)\n method. In Python, a standard `datetime.datetime` object can be converted\n to this format using\n [`strftime`](https://docs.python.org/2/library/time.html#time.strftime) with\n the time format spec '%Y-%m-%dT%H:%M:%S.%fZ'. Likewise, in Java, one can use\n the Joda Time's [`ISODateTimeFormat.dateTime()`](\n http://joda-time.sourceforge.net/apidocs/org/joda/time/format/ISODateTimeFormat.html#dateTime()\n ) to obtain a formatter capable of generating timestamps in this format."
      }
    },
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "API Key",
        "description": "API key authentication. Get your API key from the Formal dashboard."
      }
    }
  },
  "security": [],
  "tags": [
    {
      "name": "core.v1.GroupService"
    }
  ],
  "servers": [
    {
      "url": "https://api.joinformal.com",
      "description": "Production API"
    }
  ]
}