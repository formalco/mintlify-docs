---
globs: docs.json
description: Navigation structure rules for docs.json
---

# docs.json Navigation Rules

## Structure

[docs.json](mdc:docs.json) defines the entire site navigation with tabs and groups.

## Current Tabs

1. **Documentation** - User guides (43 pages, 8 groups)
2. **API Reference** - Auto-generated (24 services)
3. **Glossary** - Terms and definitions
4. **Changelog** - Product release notes

## Documentation Groups

- Getting Started (4 pages)
- Core Concepts (6 pages)
- Policy Engine (4 pages)
- Integrations (7 pages)
- Observability (1 page)
- Configuration (4 pages)
- Client Tools (3 pages)
- How-To Guides (7 pages)

## Adding a New Page

### 1. Create MDX file

```bash
docs/guides/category/page-name.mdx
```

### 2. Add to docs.json

```json
{
  "group": "Category Name",
  "pages": [
    "docs/guides/category/existing-page",
    "docs/guides/category/page-name" // NO .mdx extension!
  ]
}
```

### Critical Rules

- ❌ **Never** add file extension (`.mdx`)
- ✅ Use full path from root
- ✅ Keep alphabetical order within groups
- ❌ **Never** manually add OpenAPI pages (auto-generated)

## API Reference Structure

API Reference pages are auto-generated by [scripts/generate-api-navigation.ts](mdc:scripts/generate-api-navigation.ts).

Each OpenAPI service gets its own group:

```json
{
  "tab": "API Reference",
  "groups": [
    {
      "group": "ConnectorService",
      "pages": ["docs/api/connectors"],
      "openapi": "docs/api/openapi/core.v1.ConnectorService.json"
    }
  ]
}
```

## Validation

After editing docs.json:

1. Check JSON syntax is valid
2. Run `pnpm dev` to test locally
3. Verify navigation loads correctly
4. Check for broken links: `pnpm check-links`

## Group Naming

- Use imperative or noun-phrase names
- Keep concise (≤3 words)
- Match user mental model
- Examples: "Getting Started", "Core Concepts", "How-To Guides"

## Tab Order

Order tabs by user journey:

1. Documentation (getting started)
2. API Reference (implementation)
3. Glossary (reference)
4. Changelog (updates)
